<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker学习</title>
      <link href="/2024/02/26/docker%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/02/26/docker%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Docker基础"><a href="#一、Docker基础" class="headerlink" title="一、Docker基础"></a>一、Docker基础</h2><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><div class="table-container"><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>文档地址</strong></th></tr></thead><tbody><tr><td>docker pull</td><td>拉取镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/pull/" target="_blank" rel="noopener">docker pull</a></td></tr><tr><td>docker push</td><td>推送镜像到DockerRegistry</td><td><a href="https://docs.docker.com/engine/reference/commandline/push/" target="_blank" rel="noopener">docker push</a></td></tr><tr><td>docker images</td><td>查看本地镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/images/" target="_blank" rel="noopener">docker images</a></td></tr><tr><td>docker rmi</td><td>删除本地镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/rmi/" target="_blank" rel="noopener">docker rmi</a></td></tr><tr><td>docker run</td><td>创建并运行容器（不能重复创建）</td><td><a href="https://docs.docker.com/engine/reference/commandline/run/" target="_blank" rel="noopener">docker run</a></td></tr><tr><td>docker stop</td><td>停止指定容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/stop/" target="_blank" rel="noopener">docker stop</a></td></tr><tr><td>docker start</td><td>启动指定容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/start/" target="_blank" rel="noopener">docker start</a></td></tr><tr><td>docker restart</td><td>重新启动容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/restart/" target="_blank" rel="noopener">docker restart</a></td></tr><tr><td>docker rm</td><td>删除指定容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/rm/" target="_blank" rel="noopener">docs.docker.com</a></td></tr><tr><td>docker ps</td><td>查看容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/ps/" target="_blank" rel="noopener">docker ps</a></td></tr><tr><td>docker logs</td><td>查看容器运行日志</td><td><a href="https://docs.docker.com/engine/reference/commandline/logs/" target="_blank" rel="noopener">docker logs</a></td></tr><tr><td>docker exec</td><td>进入容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/exec/" target="_blank" rel="noopener">docker exec</a></td></tr><tr><td>docker save</td><td>保存镜像到本地压缩文件</td><td><a href="https://docs.docker.com/engine/reference/commandline/save/" target="_blank" rel="noopener">docker save</a></td></tr><tr><td>docker load</td><td>加载本地压缩文件到镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/load/" target="_blank" rel="noopener">docker load</a></td></tr><tr><td>docker inspect</td><td>查看容器详细信息</td><td><a href="https://docs.docker.com/engine/reference/commandline/inspect/" target="_blank" rel="noopener">docker inspect</a></td></tr></tbody></table></div><h2 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改/root/.bashrc文件</span></span><br><span class="line"><span class="string">vi</span> <span class="string">/root/.bashrc</span></span><br><span class="line"><span class="string">内容如下：</span></span><br><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line"><span class="string">alias</span> <span class="string">rm='rm</span> <span class="string">-i'</span></span><br><span class="line"><span class="string">alias</span> <span class="string">cp='cp</span> <span class="string">-i'</span></span><br><span class="line"><span class="string">alias</span> <span class="string">mv='mv</span> <span class="string">-i'</span></span><br><span class="line"><span class="string">alias</span> <span class="string">dps='docker</span> <span class="string">ps</span> <span class="string">--format</span> <span class="string">"table <span class="template-variable">&#123;&#123;.ID&#125;&#125;</span>\t<span class="template-variable">&#123;&#123;.Image&#125;&#125;</span>\t<span class="template-variable">&#123;&#123;.Ports&#125;&#125;</span>\t<span class="template-variable">&#123;&#123;.Status&#125;&#125;</span>\t<span class="template-variable">&#123;&#123;.Names&#125;&#125;</span>"</span><span class="string">'</span></span><br><span class="line"><span class="string">alias dis='</span><span class="string">docker</span> <span class="string">images'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="string">if</span> <span class="string">[</span> <span class="string">-f</span> <span class="string">/etc/bashrc</span> <span class="string">];</span> <span class="string">then</span></span><br><span class="line">        <span class="string">.</span> <span class="string">/etc/bashrc</span></span><br><span class="line"><span class="string">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">source</span> <span class="string">/root/.bashrc</span></span><br></pre></td></tr></table></figure><h2 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h2><p>容器内文件不方便修改与操作，因此通过数据卷将容器内文件与宿主机文件建立映射关系，通过操作宿主机对应文件即可更改容器内文件</p><div class="table-container"><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>文档地址</strong></th></tr></thead><tbody><tr><td>docker volume create</td><td>创建数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_create/" target="_blank" rel="noopener">docker volume create</a></td></tr><tr><td>docker volume ls</td><td>查看所有数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/" target="_blank" rel="noopener">docs.docker.com</a></td></tr><tr><td>docker volume rm</td><td>删除指定数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/" target="_blank" rel="noopener">docs.docker.com</a></td></tr><tr><td>docker volume inspect</td><td>查看某个数据卷的详情</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/" target="_blank" rel="noopener">docs.docker.com</a></td></tr><tr><td>docker volume prune</td><td>清除数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/" target="_blank" rel="noopener">docker volume prune</a></td></tr></tbody></table></div><ul><li><code>/var/lib/docker/volumes</code>这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为<code>/数据卷名/_data</code></li><li>MySql容器启动时存在匿名数据卷</li><li>-v参数指定数据卷</li></ul><h2 id="挂载本地目录"><a href="#挂载本地目录" class="headerlink" title="挂载本地目录"></a>挂载本地目录</h2><p>数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 挂载本地目录</span></span><br><span class="line">-v 本地目录:容器内目录</span><br><span class="line"><span class="comment"># 挂载本地文件</span></span><br><span class="line">-v 本地文件:容器内文件</span><br></pre></td></tr></table></figure><h2 id="镜像构建"><a href="#镜像构建" class="headerlink" title="镜像构建"></a>镜像构建</h2><p>Dockerfile</p><div class="table-container"><table><thead><tr><th><strong>指令</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>FROM</strong></td><td>指定基础镜像</td><td><code>FROM centos:6</code></td></tr><tr><td><strong>ENV</strong></td><td>设置环境变量，可在后面指令使用</td><td><code>ENV key value</code></td></tr><tr><td><strong>COPY</strong></td><td>拷贝本地文件到镜像的指定目录</td><td><code>COPY ./xx.jar /tmp/app.jar</code></td></tr><tr><td><strong>RUN</strong></td><td>执行Linux的shell命令，一般是安装过程的命令</td><td><code>RUN yum install gcc</code></td></tr><tr><td><strong>EXPOSE</strong></td><td>指定容器运行时监听的端口，是给镜像使用者看的</td><td>EXPOSE 8080</td></tr><tr><td><strong>ENTRYPOINT</strong></td><td>镜像中应用的启动命令，容器运行时调用</td><td>ENTRYPOINT java -jar xx.jar</td></tr></tbody></table></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-jre-buster</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> docker-demo.jar /app.jar</span></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接指定Dockerfile目录</span></span><br><span class="line">docker build -t docker-demo:1.0 /root/demo</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>实现容器之间的互相访问</p><div class="table-container"><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>文档地址</strong></th></tr></thead><tbody><tr><td>docker network create</td><td>创建一个网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_create/" target="_blank" rel="noopener">docker network create</a></td></tr><tr><td>docker network ls</td><td>查看所有网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_ls/" target="_blank" rel="noopener">docs.docker.com</a></td></tr><tr><td>docker network rm</td><td>删除指定网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_rm/" target="_blank" rel="noopener">docs.docker.com</a></td></tr><tr><td>docker network prune</td><td>清除未使用的网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_prune/" target="_blank" rel="noopener">docs.docker.com</a></td></tr><tr><td>docker network connect</td><td>使指定容器连接加入某网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_connect/" target="_blank" rel="noopener">docs.docker.com</a></td></tr><tr><td>docker network disconnect</td><td>使指定容器连接离开某网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/" target="_blank" rel="noopener">docker network disconnect</a></td></tr><tr><td>docker network inspect</td><td>查看网络详细信息</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/" target="_blank" rel="noopener">docker network inspect</a></td></tr></tbody></table></div><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p><strong>DockerCompose</strong></p><p>Docker Compose可以帮助我们实现<strong>多个相互关联的Docker容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p><div class="table-container"><table><thead><tr><th><strong>docker run 参数</strong></th><th><strong>docker compose 指令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>—name</td><td>container_name</td><td>容器名称</td></tr><tr><td>-p</td><td>ports</td><td>端口映射</td></tr><tr><td>-e</td><td>environment</td><td>环境变量</td></tr><tr><td>-v</td><td>volumes</td><td>数据卷配置</td></tr><tr><td>—network</td><td>networks</td><td>网络</td></tr></tbody></table></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.8"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3306:3306"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"./mysql/conf:/etc/mysql/conf.d"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"./mysql/data:/var/lib/mysql"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"./mysql/init:/docker-entrypoint-initdb.d"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">  <span class="attr">hmall:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"18080:18080"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"18081:18081"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"./nginx/nginx.conf:/etc/nginx/nginx.conf"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"./nginx/html:/usr/share/nginx/html"</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">hm-net:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure><p><code>docker compose up -d</code></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟现实</title>
      <link href="/2024/02/22/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E/"/>
      <url>/2024/02/22/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟现实"><a href="#虚拟现实" class="headerlink" title="虚拟现实"></a><strong>虚拟现实</strong></h1><h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><p>​        <strong>虚拟现实就是采用以计算机技术为核心的现代高技术生成逼真的视、听、触觉一体化的一定范围的实时三维虚拟环境，用户可以借助必要的装备以自然的方式与虚拟环境中的物体进行交互作用、相互影响，产生接近真实环境的感受和体验。虚拟环境是由计算机生成的实时动态的三维立体逼真图像，它可以是某一现实世界的再现，也可以是虚拟构想的世界。</strong></p><p>虚拟现实：增强现实，增强虚境，虚拟环境（VE） VE &lt; VR</p><p>实物虚化：如何将现实世界中物体和数据映射成具有某种几何、物理和行为属性的对象</p><p> 虚物实化：如何将计算机中的虚拟对象映射到现实世界中</p><h2 id="3I特征"><a href="#3I特征" class="headerlink" title="3I特征"></a>3I特征</h2><p>​        沉浸性(immersion):参与者全身心地沉浸于计算机所生成的三维虚拟环境，并产生身临其境的感觉</p><p>​        交互性(interaction): 参与者可以利用各种感官功能及人类自然技能与虚拟环境进行交互考察与操作</p><p>​        构想性(imagination): 参与者借助VR系统给出的逼真视听触觉信号而产生的对虚拟空间的想象</p><h2 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h2><p>现实世界/对象、虚拟环境、人(及交互设备)</p><h2 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h2><p>首先对真实世界进行建模，进行实物虚化，构建对象模型，其中包括在几何物理行为属性上的建模；渲染，虚物实化，在视听触觉等方面进行渲染，将虚拟环境呈现；交互，虚拟环境与用户相互作用</p><p>真实世界-建模（几何模型 物理模型 行为模型）-虚拟环境-渲染（视听触味嗅）</p><h2 id="四大类核心技术"><a href="#四大类核心技术" class="headerlink" title="四大类核心技术"></a>四大类核心技术</h2><p>三维建模技术 实时逼真绘制技术 人机交互技术 分布式虚拟现实技术</p><h2 id="应用方向"><a href="#应用方向" class="headerlink" title="应用方向"></a>应用方向</h2><p><strong>训练演练(模拟现实环境)、规划(设计)、预测(虚拟未来环境)、观赏娱乐(构想现实未来幻想环境)、虚拟实验</strong></p><h2 id="虚拟环境的构造"><a href="#虚拟环境的构造" class="headerlink" title="虚拟环境的构造"></a>虚拟环境的构造</h2><p>目前虚拟环境的构造方法(包括相应的支撑平台和工具)有<strong>数学建模</strong>(几何和解析，解析有基于纹理、基于粒子系统和直接解析生成等多种方法)和<strong>复制现实</strong>(视域中基于图象，声域中基于录音)两大类。它们具有各自的优点和固有的局限，前者三维特性好，后者逼真度高。</p><h2 id="分布式虚拟现实"><a href="#分布式虚拟现实" class="headerlink" title="分布式虚拟现实"></a>分布式虚拟现实</h2><p>分布式虚拟现实有基于高速专用网络和基于Internet网两类。</p><h1 id="二、虚拟现实硬件系统"><a href="#二、虚拟现实硬件系统" class="headerlink" title="二、虚拟现实硬件系统"></a>二、虚拟现实硬件系统</h1><h1 id="1、虚拟现实输入设备"><a href="#1、虚拟现实输入设备" class="headerlink" title="1、虚拟现实输入设备"></a>1、虚拟现实输入设备</h1><p>==用户信息的输入（位置、动作）==</p><p> ==物体属性的输入（几何、表面）== </p><p>==真实信息的输入 （传感器）==</p><h2 id="用户信息的输入"><a href="#用户信息的输入" class="headerlink" title="用户信息的输入"></a>用户信息的输入</h2><h3 id="1三维空间跟踪球"><a href="#1三维空间跟踪球" class="headerlink" title="1三维空间跟踪球"></a>1三维空间跟踪球</h3><h3 id="2三维空间位置跟踪器（位置定位器）"><a href="#2三维空间位置跟踪器（位置定位器）" class="headerlink" title="2三维空间位置跟踪器（位置定位器）"></a>2三维空间位置跟踪器（位置定位器）</h3><p>​        三维空间位置跟踪器是VR系统中用于空间跟踪定位的装置，一般与其他VR设备结合使用，如：数据头盔、立体眼镜、数据手套等，使参与者在空间上能够自由移动、旋转，不局限于固定的空间位置，操作更加灵活、自如、随意。产品有六个自由度和三个自由度之分</p><p>​        作用：虚拟现实系统中，当使用者进行位置移动时，计算机可以迅速进行复杂的运算，将精确的动态运动特征传回，从而产生强大的临场感、真实感。要实现该类应用，首先要让计算机感知使用者在虚拟空间中所处的位置，包括距离和角度等。位置追踪技术是虚拟现实技术中的重要组成部分之一。</p><ul><li><strong>电磁位置跟踪</strong></li></ul><p>​        通过衡量不同方向上电磁场的强弱来实现。通常由基站发出电磁信号。当监测点与基站距离增大时，电磁场强度会减弱；当检测点转动时，电磁场在不同方向上的分布会变化，因此可以检测方向。但精度低，不适合vr使用</p><ul><li><strong>声学位置追踪系统</strong></li></ul><p>​        测量声音信号到接收器的时间。通常使用多个发射器，并对应多个安装在被追踪物上的接收器。当发射时间可知，通过接收到信号的时间就得出距离；当安装多个接收器，通过他们收到信号时间的差异可以判断被追踪物体的方向</p><ul><li><strong>惯性位置追踪系统</strong></li></ul><p>​        惯性追踪使用==加速度计和陀螺仪==实现。加速度计根据测量到的线性加速度可以得到被追踪物相对一个起始点的位置；陀螺仪是基于MEMS技术的部件，通过测量角速度可以算出相对一个起始点的角度</p><p>​        十分便宜；能提供高更新率及低延迟。但缺点是会产生漂移</p><ul><li><p><strong>光学位置追踪系统</strong></p><ul><li><p><strong>利用标记的光学追踪</strong></p><p>​        被追踪物体上按某种规则布满标记点。一个或多个摄影镜头持续地捕捉标记点，并利用一些算法（如POSIT算法）得出物体的位置。算法会把镜头捕捉到的标记点位置和原先的规则作比较，从而得出物体的位置和朝向。算法中也需要考虑有些标记点在镜头视野之外或被遮挡的情况<br>​        标记点有主动和被动两种。主动型标记点通常会定期发射红外线。因为可以将红外线发射时间和镜头作同步，可以排除周围其他红外线的干扰。被动型标记点实际上是反射器，将红外线反射回光源。如果使用被动型标记点，通常镜头里会有红外线发射器。</p></li><li><p><strong>利用可见标记点的光学追踪</strong></p><p>​        利用特殊图案或花纹作为标记点。镜头可以辨认出这些标记点，将多个标记点放置于特定的位置，就可以计算出位置和方向。</p></li><li><p><strong>无标记点的光学追踪</strong> </p><p>​        如果被追踪物体的几何形状已知（比如由CAD模型产生），也可以通过持续搜索和对比已知3D模型，实现无标记点的光学追踪。即通过分析图像中的边缘和颜色变化等信息，识别出需追踪的物体</p></li><li><p><strong>利用DepthMap的追踪</strong></p><p>​        利用Depth Map镜头也可以实现位置追踪。采用某些技术生成物体到镜头距离的实时分布图。通过从Depth Map中提取被追踪物体（如手部、脸部），并分析提取出的比例来实现位置追踪</p></li></ul></li><li><p><strong>多传感器融合</strong></p><p>综合应用上述方法。HTC Vive 结合了光学追踪和惯性追踪的方案，通过头盔接受基站发射来的各个方向红外线所需的时间和位置，判断头盔（体验者）所在的位置。Lighthouse的基站Vive没有采取通常的使用光学镜头和马克点的定位系统。其由两个基站构成</p></li></ul><h1 id="2、虚拟现实输出设备"><a href="#2、虚拟现实输出设备" class="headerlink" title="2、虚拟现实输出设备"></a>2、虚拟现实输出设备</h1><p>视域：能够被眼睛看到的区域</p><p>视角：视觉感知中关于可视目标大小的测量</p><p>视距：描述了观察的距离</p><p>人眼成像机理：人们可以通过多种视觉暗示来获得深度感知,这些暗示大致可以归为两类心理暗示和生理暗示</p><ul><li>心理暗示包括线性透视、视网膜像大小、明暗和阴影、重叠、空气透视、诱导立体、大屏幕立体等</li><li>生理暗示则主要包含==双目视差、运动视差、调节和辖辏(双目会聚)==等 &lt;通过技术实现&gt;<ul><li>双目视差：大多数人双眼间距为6.5-7.0厘米,三维场景在双眼视网膜上的成像略有不同。物体离人眼越近,差距越明显,这种视差是人眼判断距离远近的重要依据,所谓近大远小的透视关系 250m以内</li><li>运动视差：当人在观察一个三维场景时,往往不是静止的,那么在真实场景中绕着物体移动看到的将是物体的不同侧面,并且看到的场景变换应该是连续的。显示应该提供平滑的运动视差</li><li>调节(适应性)：人眼是很奇妙很精密的东西,人眼会根据场景的远近自动调整晶状体的曲率使所观看物体清晰地成像在视网膜上</li><li>辖辏(双目会聚)：观察物体时,两个眼球会对称的转动以同时对准物体,两眼会向中间或两侧运动来匹配双眼视网膜上接收到的信息,同时根据、汇聚角度的大小来判断物体的深度信息,这就是所谓的双目汇聚作用</li></ul></li></ul><p>视锥：计算机图形系统对视觉的抽象，远平面、近平面、视锥体</p><p>计算机图形过程绘制：视点【位置、朝向】 视锥【远平面、近平面、视锥体】</p><h3 id="VR头盔显示器（核心是光学系统设计）"><a href="#VR头盔显示器（核心是光学系统设计）" class="headerlink" title="VR头盔显示器（核心是光学系统设计）"></a>VR头盔显示器（核心是光学系统设计）</h3><p>主要由微图像源、光学系统、定位传感系统、电路控制及连接系统组成</p><p>==原理==：光学系统将微图像源所产生的二维影像成像在目镜系统的焦平面上, 再经过目镜系统转变成平行光, 经使用者眼前的光学组合玻璃投射到使用者的眼中</p><h3 id="AR头盔显示器（核心是光学系统设计）"><a href="#AR头盔显示器（核心是光学系统设计）" class="headerlink" title="AR头盔显示器（核心是光学系统设计）"></a>AR头盔显示器（核心是光学系统设计）</h3><p>视频透视式头盔显示器：主要通过在 VR 头盔显示器外部安装摄像头来摄取外部场景, 计算机经过计算处理过程进行虚实融合, 将虚拟信息叠加到真实场景中</p><p>光学透视式头盔显示器：主要通过放置于人眼前的一对半反半透镜来实现虚实融合. 真实场景透过半反半透镜成像于人眼, 虚拟图像经半反半透镜反射进入人眼</p><h3 id="头盔显示器关键问题"><a href="#头盔显示器关键问题" class="headerlink" title="头盔显示器关键问题"></a>头盔显示器关键问题</h3><p>头盔显示器体积大、质量大、目视光学部件过厚, 会降低便携性及用户体验</p><p>单一虚拟显示屏幕导致的调焦和辐辏不一致问题会引起人眼的视觉不适</p><p>对于具有单一 2D 显示屏的 AR 头盔显示器, 当用户观看时, 人眼需要调焦到显示器图像平面以获取附加在真实场景上的信息, 同时需要聚焦并会聚到真实场景上, 二者之间的距离超过了人眼能够同时调焦的范围</p><p>对于双目立体头盔显示器, 当观看 3D 内容时, 人眼需要调焦到屏幕上以获得清晰的图像内容, 同时又要会聚到虚拟物体以融合双目立体图像对</p><p>使用头盔显示器时,人眼调焦与辐辏的矛盾使得用户获得了不自然的视觉体验, 增加了疲劳度</p><h3 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h3><p>环幕显示装置</p><p>通过多个投影幕拼接而成最后的显示图像。一般需要多台投影仪，每个投影仪由一台计算机控制，另外需要主控计算机进行协调</p><p>需要考虑的问题包括：计算节点任务的分配、计算节点的同步机制、==显示画面的协调==</p><h5 id="显示画面的协调"><a href="#显示画面的协调" class="headerlink" title="显示画面的协调"></a>显示画面的协调</h5><p>几何校正：建立精确的投影仪帧缓存图像和用于校正的相机拍摄图像间对应关系</p><p>色彩与亮度平衡：投影仪内部和投影仪间的亮度和色彩差异可以通过色彩校正步骤进行补偿</p><p>边缘融合：分为纯硬件边缘融合、软件融合、集成式边缘融合机，将一组投影机投射出的画面进行边缘重叠，通过融合技术显示出一个没有边缝的整幅画面</p><h2 id="融合原理"><a href="#融合原理" class="headerlink" title="融合原理"></a>融合原理</h2><p>设左投影仪显示画面为函数fl(x) ，其边缘过渡函数为α(t);右投影仪显示画面为fr(x) ，其边缘过渡函数为1-α(t) ==见PPT==</p><h5 id="实际用软件或硬件实现的准则"><a href="#实际用软件或硬件实现的准则" class="headerlink" title="实际用软件或硬件实现的准则"></a>实际用软件或硬件实现的准则</h5><ul><li>准则1:应尽可能的加大融合区域，并使过度函数在融合区边界趋于零，以使几何校正相对误差尽量变小</li><li>准则2:边缘融合区域使用的过渡函数应尽量的平滑，以减弱几何校正的软误差</li></ul><p>​        应使投影仪所有像素都参与画面显示来最大化融合区域，并采取计算投影仪每个像素的亮度衰减系数矩阵A作为融合模板来提高计算速度</p><p>​        投影仪画面将先与融合模板相乘，经过投影仪内部响应函数的校正后，再被投射</p><p>硬边衔接 简单拼接 边缘融合</p><h2 id="触力觉机理"><a href="#触力觉机理" class="headerlink" title="==触力觉机理=="></a>==触力觉机理==</h2><p>1 三维空间碰撞检测</p><p>2 应力计算：物体冲量I=Ft。物体碰撞时,冲量和动量相等。动量p＝mv。因为I=p，则有：Ft＝mv，即F＝mv/t </p><p>3 机械（弹簧）力觉再现：牛顿第三定律，F=F’。依据胡克定律：F’=k·x 。只需在设备上得到x，可以获得F’</p><h1 id="三、建模工具及技术"><a href="#三、建模工具及技术" class="headerlink" title="三、建模工具及技术"></a>三、建模工具及技术</h1><p>建模包括：物体的几何属性、物理属性、行为属性</p><p>==对象模型==：是构建虚拟环境的基础，也是实物虚化的重要组成部分。一般的，主要包括<strong>几何形状、表面信息、物理特性及运动属性</strong>等 几何形状+表面信息=集合模型</p><p>==几何模型==：计算机图形学与虚拟现实中，采用 “几何模型”的概念描述现实中的物体的几何形状和表面信息，对物体几何方面的属性进行了抽象。是物体模型的一个子集</p><ul><li><p>基本几何元素包括：点、边、面、体。</p></li><li><p>主要表示方法</p><p>线框表示：结构简单，用顶点和邻边表示形体<br>曲面表示：在上述基础上，增加面，从而可以满足对面的操作</p><pre><code>参数曲面三角形表示</code></pre><p>实体表示<br>点表示</p></li></ul><h2 id="几何建模的常用方法"><a href="#几何建模的常用方法" class="headerlink" title="几何建模的常用方法"></a>几何建模的常用方法</h2><p>程序构造——利用函数、点线面<br>直接采集——三维扫描仪、视觉<br>建模工具——利用软件 3D max autocad creator</p><h2 id="直接采集"><a href="#直接采集" class="headerlink" title="直接采集"></a>直接采集</h2><p>真实物体-点云数据-去除噪声点-点云数据三角网格化-配准多幅点云数据-合并配准的点云数据-表面重建-补洞-网格模型</p><h2 id="OpenFlight数据库"><a href="#OpenFlight数据库" class="headerlink" title="OpenFlight数据库"></a>OpenFlight数据库</h2><p>OpenFlight数据库采用层次技术将场景数据划分成逻辑组，组成树状结构。数据库<br>树状结构由结点构成。每一个结点可以有子结点或兄弟结点。每个结点的数据属性<br>准确地定义了该结点在数据库中的功能。</p><h2 id="VR几何表示方法"><a href="#VR几何表示方法" class="headerlink" title="VR几何表示方法"></a>VR几何表示方法</h2><p>VR中的几何表示方法：表面多边形（三角形网格）表示法，即以一组表面多边形来存储物体的描述，用多边形描述的通常被称为“标准图形物体”。</p><h2 id="几何建模中的概念"><a href="#几何建模中的概念" class="headerlink" title="几何建模中的概念"></a>几何建模中的概念</h2><p>==层次细节（LOD）==自由度（DOF）实例 透明 ==纹理映射== 材质 动画序列</p><h2 id="层次细节技术-Level-of-Detail-LOD"><a href="#层次细节技术-Level-of-Detail-LOD" class="headerlink" title="层次细节技术(Level of Detail,LOD)"></a>层次细节技术(Level of Detail,LOD)</h2><ul><li>LOD技术用一组复杂程度（常常以多边形数来衡量）各不相同的层次模型来描述对象，并在运行过程中根据一些主客观标准在这些LOD模型进行切换，从而能够实时改变场景的复杂度。</li><li>当视点变化时，所选取的细节模型可能各不相同，并在模型切换的瞬间产生跳跃的感觉，此时就需要使用过渡算法（比如，瞬时关闭技术和形状过渡技术）来实现平滑切换。</li><li>LOD技术对原始网格模型建立几个不同逼近精度的网格模型, 与原始模型相比, 每个模型均保留了一定层次的细节</li><li>当计算机生成场景时, 根据该物体位置与视点远近关系的不同, 分别使用不同精细程度的模型, 当从近处观察物体时, 使用较为精细的模型; 当从远处观察物体时, 采用较为粗糙的模型</li><li>递进网格：LOD模型的一种生成方式，首先搜索平面区域和特征边, 然后使用边折叠操作进行模型简化。当边收缩产生一个新顶点时, 移去两个面和一条边, 结果产生一个简化的基网格和一系列顶点分裂操作(边收缩的逆), 可用于把细节添加到基网格上</li></ul><h2 id="自由度（Degree-Of-Free，DOF）——描述关节运动"><a href="#自由度（Degree-Of-Free，DOF）——描述关节运动" class="headerlink" title="自由度（Degree Of Free，DOF）——描述关节运动"></a>自由度（Degree Of Free，DOF）——描述关节运动</h2><h2 id="纹理"><a href="#纹理" class="headerlink" title="纹理"></a>纹理</h2><p>广义纹理贴纸</p><p>纹理贴图是一个用图像、函数或其它数据源来改变表面在每一处的外观的过程。</p><p>纹理贴图可看成是一种有效的改变物体表面属性的一种方法。颜色高光、凹凸、反射、透明度等等都可采用纹理贴图</p><p>==计算物体空间位置-&gt;用投影函数计算纹理坐标(u,v)-&gt;对应函数把参数空间的值转化为纹理空间的位置-&gt;应用值变换函数-&gt;改变方程或fragment值==</p><h2 id="虚拟人运动控制"><a href="#虚拟人运动控制" class="headerlink" title="虚拟人运动控制"></a>虚拟人运动控制</h2><p>关键帧方法：动画师设计关键帧 插值生成中间帧</p><p>运动学方法：</p><ul><li>正向运动学（Forward Kinematics）通过给定人体各关节的状态信息确定各关节的位置和方向 求解关节坐标系到世界坐标系的变换</li><li>逆向运动学（Inverse Kinematics）根据各末端关节在世界坐标系中的位置和方向确定人体其它关节的状态信息</li></ul><p>动力学方法：通过人体受力和力矩求解人体各项运动学参数 正向动力学 逆向动力学</p><p>运动捕获方法：通过光或者磁的传感器将真实人体的运动数据记录下来，然后用来驱动人体模型运动</p><p>运动编辑和运动重定向、基于快速连接图的运动合成、路径合成</p><h1 id="四、显示与渲染技术-将虚拟环境输出，作用于参与者"><a href="#四、显示与渲染技术-将虚拟环境输出，作用于参与者" class="headerlink" title="四、显示与渲染技术 将虚拟环境输出，作用于参与者"></a>四、显示与渲染技术 将虚拟环境输出，作用于参与者</h1><p><strong>视觉渲染</strong> 将几何模型按照视觉原理进行表现 高带宽</p><p><strong>听觉渲染</strong> 提供逼真的听觉感受 低带宽</p><p><strong>触力觉渲染</strong> 提供力觉/触力觉感知信息 非常低</p><p><strong>其他通道渲染</strong> 嗅觉、味觉等</p><h2 id="视景绘制过程："><a href="#视景绘制过程：" class="headerlink" title="视景绘制过程："></a>视景绘制过程：</h2><p>1 将上述三维场景的几何描述，输入到计算机中。</p><p>2 通过对场景的透视变化，将三维描述和数据转换为二维视图</p><p>3 确定场景中的所有可见对象和基本图形图象元素，根据隐藏面消除算法将视域以外或被遮挡的不可见面消除。</p><p>4 根据光照模型，计算可见元素的颜色与透射到观察者眼中的光亮度的大小和色彩。并将它转换成适合图形设备的颜色值.从而确定投影画面上每一像素的颜色，生成最终的象。</p><h2 id="触力觉生成技术"><a href="#触力觉生成技术" class="headerlink" title="触力觉生成技术"></a>触力觉生成技术</h2><p>刚性物体的单点力计算方法 柔性物体的受力与变形之间的关系</p><h2 id="VR显示技术"><a href="#VR显示技术" class="headerlink" title="VR显示技术"></a>VR显示技术</h2><p>模型转换：将模型由物体坐标系转向世界坐标系</p><p>光照（阴影）：根据材质属性、表面属性（法线）和光源点亮（着色）物体</p><p>视觉转换：将世界空间映射到眼睛空间；观察位置转换为原点，方向沿某个轴（通常为 z）</p><p>剪裁：转化为标准设备坐标（NDC），移除视锥体之外的部分</p><p>投影：物体被投影到屏幕空间</p><p>扫描转换(光栅化)：将对象光栅化为像素</p><p>显示：每个像素记住了最近的物体</p><h3 id="常见坐标系"><a href="#常见坐标系" class="headerlink" title="常见坐标系"></a>常见坐标系</h3><p>物体空间：每个对象的局部</p><p>世界空间：所有对象共有</p><p>眼空间：从视锥体导出</p><p>标准设备空间：移除视锥体之外的部分</p><p>屏幕空间：根据硬件属性索引</p><h1 id="五、前沿技术"><a href="#五、前沿技术" class="headerlink" title="五、前沿技术"></a>五、前沿技术</h1><h2 id="AR"><a href="#AR" class="headerlink" title="AR"></a>AR</h2><p>用户直接看到的真实场景和计算机生成内容的混合、计算机生成内容对真实场景的增强，以提供额外的信息，为用户生成一个合成的视图</p><h3 id="AR与VR区别"><a href="#AR与VR区别" class="headerlink" title="AR与VR区别"></a>AR与VR区别</h3><p>AR：增强真实世界的系统、用户保持对真实世界的感知、需要引入一种机制对虚拟内容与真实场景进行混合</p><p>VR：完全沉浸式的虚拟场景、所有的感官感受都受控于系统 (包括视觉、听觉、嗅觉、味觉和力触觉）</p><h3 id="AR需要完成的任务"><a href="#AR需要完成的任务" class="headerlink" title="AR需要完成的任务"></a>AR需要完成的任务</h3><ul><li><p>观察者/相机的光学参数和位置朝向信息 </p></li><li><p>可以成像的显示设备 </p></li><li><p>对所有设备的校准:把各个设备的坐标系中的坐标和场景中对象的坐标转化到同一个全局的坐标系中</p></li></ul><h2 id="物理仿真"><a href="#物理仿真" class="headerlink" title="物理仿真"></a>物理仿真</h2><p>运动学：只考虑运动、由位置、速度和加速度确定</p><p>动力学：考虑底层的受力、基于初始条件和物理方程来计算运动</p><h2 id="粒子系统"><a href="#粒子系统" class="headerlink" title="粒子系统"></a>粒子系统</h2><p>粒子：质量、位置、速度、加速度、颜色、生命周期</p><p>对于每一帧图像：生成新粒子，并设置属性；删除过期的粒子；基于粒子属性和物理方程更新粒子；绘制粒子</p><h2 id="3D交互"><a href="#3D交互" class="headerlink" title="3D交互"></a>3D交互</h2><p>人机交互，其中用户的任务在3D空间环境中执行</p><p>VR中的通用3D交互任务</p><ul><li>对象交互<ul><li>选择：从集合中挑选对象</li><li>操作：修改对象属性</li></ul></li><li>导航<ul><li>行程：视点运动的运动组件</li><li>寻路：认知成分，决策</li></ul></li><li>系统控制<ul><li>发出命令来更改系统状态或模式</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> VR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库知识总结</title>
      <link href="/2024/02/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%BB%E7%BB%93/"/>
      <url>/2024/02/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="数据库-期末复习"><a href="#数据库-期末复习" class="headerlink" title="数据库 期末复习"></a>数据库 期末复习</h1><h2 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>数据：描述现实世界中各种事物的可以识别的符号。</li><li><p>信息：一种已经被加工为特定形式的数据。数据只有被加工为信息才有价值。</p><ul><li>信息是各种数据所包括的意义。</li><li>数据是信息的载体，是信息的具体表现形式。</li></ul></li><li><p>数据处理：从大量原始数据抽取和推导有价值信息的加工过程。包括：数据收集、组织、存储、加工、分类、检索、输出、传输等操作。</p></li><li>数据管理：数据处理一般性的基本操作，研究专门的技术——数据库管理技术。</li><li>数据库技术：按照某种数据结构对数据进行组织，将数据存储在计算机的二级存储中，并可以提供数据共享操作的数据管理技术。</li></ul><h3 id="什么是数据库系统"><a href="#什么是数据库系统" class="headerlink" title="什么是数据库系统"></a>什么是数据库系统</h3><p>建立在<strong>数据库管理系统(DBMS)</strong>之上，以满足实际应用需求的数据管理（组织、存储、使用）为主要功能的计算机软件系统。</p><h3 id="数据管理技术的发展"><a href="#数据管理技术的发展" class="headerlink" title="数据管理技术的发展"></a>数据管理技术的发展</h3><h4 id="人工管理阶段"><a href="#人工管理阶段" class="headerlink" title="人工管理阶段"></a>人工管理阶段</h4><ul><li>时间：20世纪50年代中期以前</li><li>背景：外存只有磁带、卡片、纸带等，没有磁盘等直接存取设备，没有OS。</li><li>特点：<ul><li>数据不在计算机上保存。</li><li>没有软件系统对数据进行管理。程序规定数据的逻辑结构与物理结构，程序与数据不具备独立性。</li><li>没有文件的概念，数据组织方式必须由程序员设计。</li><li>一组数据对应一个程序，数据是面向应用的，程序间不能共享数据。</li></ul></li></ul><h4 id="文件系统阶段"><a href="#文件系统阶段" class="headerlink" title="文件系统阶段"></a>文件系统阶段</h4><ul><li>时间：20世纪50年代后期到60年代中期。</li><li>背景：有磁盘、有文件系统。</li><li>特点：<ul><li>以文件形式保存在外存上。</li><li>文件多样化。</li><li>数据的存取基本上以记录为单位。</li><li>程序和数据有一定的独立性。</li></ul></li><li>缺点：<ul><li>数据冗余度大，浪费空间并且易造成数据的不一致性。</li><li>数据和程序缺乏独立性。</li><li>不能反映现实世界事物之间的关系。</li></ul></li></ul><h4 id="数据库系统阶段"><a href="#数据库系统阶段" class="headerlink" title="数据库系统阶段"></a>数据库系统阶段</h4><ul><li>时间：20世纪60年代后期开始</li><li>背景：有了大容量磁盘、光盘，计算机管理数据量大，关系复杂，共享性要求强。</li><li>==特点：==<ul><li>面向全组织的复杂的数据结构，不仅描述数据本身，还描述联系，使得整个组织<strong>结构化</strong>。==<strong>数据结构化是数据库与文件系统的根本区别。</strong>==</li><li>数据冗余度小，易扩充。</li><li>具有较高的数据和程序独立性。<ul><li><strong>数据物理独立性：存储结构改变时，逻辑结构可以不变。</strong></li><li><strong>数据逻辑独立性：逻辑结构改变时，应用程序可以不变。</strong></li></ul></li><li>提供了两方面映像功能（<strong>映像功能实现数据的独立性</strong>）：<ul><li>存储结构与逻辑结构映像——实现物理独立性。</li><li>全局逻辑结构与某类应用所涉及的局部逻辑结构之间的映像——实现逻辑独立性。</li></ul></li><li>统一的数据控制功能。<ul><li>数据安全性控制。</li><li>数据完整性控制。</li><li>并发控制。</li><li>数据库恢复。</li></ul></li><li>数据的最小存取单位是数据项。</li></ul></li></ul><h3 id="数据库系统的组成"><a href="#数据库系统的组成" class="headerlink" title="数据库系统的组成"></a>数据库系统的组成</h3><ul><li>数据库：数据库中存储的数据是集成的、共享的。</li><li>用户：存储、维护和检索数据的各类请求。分为三类：<ul><li>终端用户</li><li>应用程序员</li><li>数据库管理员</li></ul></li><li>软件：包括DBMS和各种应用系统。</li><li>硬件：存储数据库和运行DBMS的硬件资源，如内存、外存。</li></ul><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>数据模型用来抽象和表示现实世界中的数据和信息。</p><p>在数据库中，模型分为两类：<strong>==概念模型和数据模型==</strong>。</p><h4 id="数据模型的层次"><a href="#数据模型的层次" class="headerlink" title="数据模型的层次"></a>数据模型的层次</h4><p>现实世界 —— 信息世界（概念模型） —— 机器世界（数据模型）</p><ul><li>数据模型：按计算机系统的观点对数据建模。</li><li>概念模型：现实世界到信息世界的抽象，是用户和数据库设计人员进行交流的语言。</li></ul><h4 id="概念模型-信息模型-概念结构"><a href="#概念模型-信息模型-概念结构" class="headerlink" title="==概念模型(信息模型)== 概念结构"></a>==概念模型(信息模型)== 概念结构</h4><p>基于信息世界的主要概念，表达应用中的各种语义。具有较强的语义表达能力，能够方便、直接表达应用中的各种语义。应该简单、清晰、易于理解。</p><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><ul><li>实体：客观存在并可以相互区分的事物。</li><li>属性：实体所具有的某一特性。</li><li>码：唯一标识实体的属性集。</li><li>域：某个（某些）属性的取值范围。</li><li>实体型：表示一类实体，用实体名称与属性名集合来抽象刻画。</li><li>联系：实体之间的联系，有名称、类型（3种），并且可以具有属性。</li></ul><h5 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h5><p>组成包含：实体、联系、属性。</p><ul><li>实体：长方形。</li><li>属性：椭圆形，用无向边连接属性。</li><li>联系：菱形，用无向边连接有关的实体，并在边上标注联系类型。</li><li>一些说明：<ul><li>同一个实体集内部各实体可以有一对一、一对多和多对多联系。</li><li>三个或以上的实体可能具有联系。</li><li>两个实体之间可能有多种联系。</li></ul></li></ul><h4 id="数据模型-逻辑结构"><a href="#数据模型-逻辑结构" class="headerlink" title="数据模型 逻辑结构"></a>数据模型 逻辑结构</h4><h5 id="三要素"><a href="#三要素" class="headerlink" title="==三要素=="></a>==三要素==</h5><ul><li><strong>数据结构</strong>：由描述数据对象以及对象之间的联系的一组概念组成。是<strong>静态特性</strong>的描述，是<strong>刻画数据模型最重要的方面</strong>。<ul><li>描述对象的类型、内容和性质的概念，如域、属性。</li><li>描述对象之间联系的概念，如关系。</li></ul></li><li><strong>数据操作</strong>：是对数据库中各种数据对象的实例允许执行的操作集合，包括操作以及操作规则。是数据模型的<strong>动态特性</strong>的描述。数据库主要有<strong>检索</strong>和<strong>更新</strong>两大类操作。</li><li><strong>完整性约束</strong>：完整性规则的集合，是给定数据模型中<strong>数据及其联系所有的制约和依存规则</strong>，用以<strong>保证数据正确、相容</strong>。</li></ul><h5 id="分类"><a href="#分类" class="headerlink" title="==分类=="></a>==分类==</h5><ul><li>层次模型：树结构，用有向树表示一对多联系。<ul><li>特点：有且仅有一个结点没有双亲，其他节点仅有一个双亲。</li><li>优点：结构简单易于实现。</li><li>缺点：支持联系种类太少，数据操纵不方便。</li><li>代表：IBM的IMS数据库。</li></ul></li><li>网状模型：图结构，用有向图表示一对多联系。<ul><li>特点：可以有一个以上结点没有双亲，至少有一个结点有多于一个双亲。表达的联系种类丰富，结构复杂。</li></ul></li><li>关系模型：二维表<ul><li>特点：用关系描述实体与实体间的联系，可直接表示多对多联系，关系必须是规范化关系（不允许表套表），必须建立在数学概念基础上。</li></ul></li></ul><h3 id="数据库系统的结构"><a href="#数据库系统的结构" class="headerlink" title="数据库系统的结构"></a>数据库系统的结构</h3><p><strong>==三级模式、两级映像。==</strong></p><h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><p><strong>数据库中全体数据的逻辑结构和特性的描述。</strong></p><p>是三级模式的核心，不涉及物理存储细节，与具体应用程序和编程语言无关。</p><p>用模式DDL写出的一个数据库逻辑定义的全部语句称为某个数据库的模式。</p><h4 id="外模式"><a href="#外模式" class="headerlink" title="外模式"></a>外模式</h4><p>个别用户的数据视图，即<strong>与某一应用有关的数据的逻辑表示</strong>。通常是模式的子集，一个应用只能启用一个外模式。数据库提供外模式描述语言定义外模式。</p><h4 id="内模式"><a href="#内模式" class="headerlink" title="内模式"></a>内模式</h4><p>称为存储模式，是数据在数据库系统内部的表示，即<strong>对数据的物理结构和存储方式的描述</strong>。</p><h4 id="两级映象"><a href="#两级映象" class="headerlink" title="两级映象"></a>两级映象</h4><ul><li>外模式/模式映象定义某个外模式与模式之间的对应关系，当模式改变时，映像做出改变就可以保证外模式不变。——<strong>==数据的逻辑独立性==</strong></li><li>模式/内模式映象定义数据逻辑结构与存储结构之间的对应关系，内模式改变时，修改该映象可以使得模式保持不变。——<strong>==数据的物理独立性==</strong></li></ul><h4 id="三级模式结构的优点"><a href="#三级模式结构的优点" class="headerlink" title="三级模式结构的优点"></a>三级模式结构的优点</h4><ul><li>保证数据的独立性</li><li>简化用户接口，方便用户使用</li><li>有利于数据共享</li><li>有利于数据的安全保密</li></ul><h3 id="DBMS"><a href="#DBMS" class="headerlink" title="DBMS"></a>DBMS</h3><h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><ul><li>数据库定义功能：提供DDL语言描述外模式、模式和内模式，模式翻译程序把原模式翻译成目标模式，存入数据字典。</li><li>数据存取功能：提供DML语言进行增删查改。</li><li>数据库运行管理：并发控制、存取控制、完整性约束条件检查和执行……</li><li>数据组织、存储和管理</li><li>数据库的建立和维护</li></ul><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul><li>语言编译处理程序</li><li>系统运行控制程序</li><li>系统建立和维护程序</li><li>数据字典</li></ul><h2 id="第二章-关系数据库"><a href="#第二章-关系数据库" class="headerlink" title="第二章 关系数据库"></a>第二章 关系数据库</h2><h3 id="关系的数学定义"><a href="#关系的数学定义" class="headerlink" title="关系的数学定义"></a>关系的数学定义</h3><ul><li>域</li><li>元组和分量</li><li>关系：笛卡尔积$D_1 <em> D_2 </em> …$的子集叫做在域$D_1 <em> D_2 </em> …$上的关系，用$R(D_1, D_2, …)$表示。$n$是关系的度或目（$degree$）。</li></ul><h3 id="关系数据模型"><a href="#关系数据模型" class="headerlink" title="==关系数据模型=="></a>==关系数据模型==</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li>关系模型的==数据结构==——关系。</li><li>码<ul><li>候选码：关系中的某一个属性组，若它唯一标识元组并具有最小性则为候选码。</li><li>主码：选定一个候选码为主码。</li></ul></li><li>主属性：码中的属性。</li><li>非主属性：不在码中的属性。</li><li><strong>关系模式</strong>：$R(U, D, dom, F, I)$，简记作$R(A_1, A_2,\dots,A_n)$。关系式关系模式在某一时刻的状态或内容。关系模式是<strong>相对稳定</strong>的，关系是动态的。</li><li>语义约束：<ul><li>==实体完整性==：要有属性或属性组合作为主码，主码不能为空或部分为空。</li><li>==参照完整性==：<ul><li>外码：某个R的属性（组）与另外一个基本关系S的主码对应，即为外码。R为参照关系，S为被参照关系（目标关系）。</li><li>参照完整性：外码或者等于S的主码，或者为空。</li></ul></li><li>用户定义完整性</li></ul></li></ul><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><ul><li><p>特点：集合操作，操作对象都是集合。</p></li><li><p>基础：关系运算，分为代数方式和逻辑方式。</p><ul><li><p>关系代数</p></li><li><p>关系演算</p><ul><li>元组关系演算</li><li>域关系演算</li></ul></li></ul></li></ul><h3 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h3><p>共有9种：</p><ul><li>常规集合运算：并、差、交、广义笛卡尔积。</li><li>特有关系运算：选择、投影、连接、自然连接、求商。</li></ul><h4 id="传统集合运算"><a href="#传统集合运算" class="headerlink" title="传统集合运算"></a>传统集合运算</h4><p>是二目运算，除了笛卡尔积外，要求参加运算的两个关系必须是同类关系。</p><ul><li>并：将R和S的元组统一到一个集合。</li><li>差：从R中剔除S中存在的元组。</li><li>交：R和S的共同元组。</li><li>广义笛卡尔积：将R和S的元组并列。</li></ul><h4 id="专门的关系运算"><a href="#专门的关系运算" class="headerlink" title="专门的关系运算"></a>专门的关系运算</h4><ul><li>选择：在R中选择出满足条件的元组，记作$\sigma_F(R) = {t|t∈R,F(t)=true}$。</li><li>投影：从R中选出若干属性==删除重复的行==，记作$\pi_A(R)={t[A]|t∈R,A\sube U}$。</li><li>连接：R和S在属性X和Y上的连接（X，Y是连接属性，即X和Y包含同等数量的属性，且相应属性有共同的域），是从两个关系的广义笛卡尔积里选出满足比较条件θ的元组，记作 $R⋈S_{X \theta Y}={t|t=<r,s>\and s∈S\and r∈R\and r[X]\theta r[Y]}$。</li><li>自然连接：在相同属性列取值相等为条件的连接，==要去掉重复属性列==。</li><li>除法：关系S的属性是关系R属性的子集，记为$R\div S={t|t∈\pi_X(R)\and s∈S\and <t,s>∈R}$。（结果包含S中没有的属性）</li></ul><h3 id="关系演算"><a href="#关系演算" class="headerlink" title="关系演算"></a>关系演算</h3><h4 id="元组关系演算"><a href="#元组关系演算" class="headerlink" title="元组关系演算"></a>元组关系演算</h4><p>基本结构是元组演算表达式。</p><h4 id="域关系演算"><a href="#域关系演算" class="headerlink" title="域关系演算"></a>域关系演算</h4><p>类似于元组演算，公式中的变量对应元组各个分量的域变量。</p><h3 id="关系运算的安全约束"><a href="#关系运算的安全约束" class="headerlink" title="关系运算的安全约束"></a>关系运算的安全约束</h3><p>不产生无限关系和无穷验证的运算成为安全运算，其表达式称为安全表达式，对其采取的限制称为安全约束。</p><h3 id="数据库数据语言"><a href="#数据库数据语言" class="headerlink" title="数据库数据语言"></a>数据库数据语言</h3><ul><li><strong>DDL</strong>：数据定义（描述）语言</li><li><strong>DML</strong>：数据操纵语言，检索、插入、修改、删除。<ul><li>联机交互方式</li><li>宿主语言方式</li></ul></li><li>DCL：数据控制语言，完成安全性控制、完整性控制、并发控制等。</li><li>关系数据语言特点：<ul><li>一体化</li><li>非过程化</li><li>面向集合的存取方式</li><li>既可以独立使用又可以与主语言嵌套使用</li></ul></li></ul><h2 id="第三章-关系数据库标准语言SQL"><a href="#第三章-关系数据库标准语言SQL" class="headerlink" title="==第三章 关系数据库标准语言SQL=="></a>==第三章 关系数据库标准语言SQL==</h2><h3 id="SQL的特点"><a href="#SQL的特点" class="headerlink" title="==SQL的特点=="></a>==SQL的特点==</h3><ul><li>综合统一</li><li>高度非过程化</li><li>面向集合</li><li>以同一种语法结构提供两种使用方式</li><li>语言简捷、易学易用</li></ul><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>基本表：实际存在的</li><li>导出表：有视图（虚表）和快照。</li></ul><h3 id="检索"><a href="#检索" class="headerlink" title="==检索=="></a>==检索==</h3><ul><li>SELECT A FROM B：对应不去重的投影操作。</li><li>SELECT DISTINCT A FROM B：对应投影。</li><li>SELECT A FROM B WHERE C = D：选取检索，可以用AND、OR或NOT连接条件=，&lt;&gt;，&gt;，&gt;=，&lt;，&lt;=。==可以使用BETWEEN a AND b表示某个区间。==</li><li>SELECT A FROM B WHERE C = D ORDER BY A ASC：对A升序排列，如果降序可以写DESC。</li><li>WHERE后可以指明连接条件，选择需要的若干列。</li><li>表自身连接：定义别名</li><li>外连接：加一个万能的空行<code>SELECT * FROM S, SC WHERE S.S#=SC.S#(*)</code></li><li>子查询：<ul><li>如果返回单值，可以直接用比较运算。</li><li>如果返回了多值，必须在比较运算符和子查询之间加入ANY或ALL。</li><li><code>IN</code>与<code>=ANY</code>是等价的，<code>NOT IN</code>与<code>!=ALL</code>是等价的。</li><li>==EXISTS：在子查询结果非空时为真。==</li><li>NOT EXISTS：子查询结果为空时为真。</li></ul></li><li>并：UNION</li><li>交：INTERSECT</li><li>差：MINUS</li><li><p>库函数：只能在SELECT子句以及HAVING子句中出现</p><ul><li>COUNT：按列值记个数，COUNT(*)对行记数。</li><li>SUM：对数值列求和。</li><li>AVG：求数值列平均值。</li><li>MAX：求列的最大值。</li><li>MIN：求列的最小值。</li></ul></li><li><p>GROUP BY A [HAVING B = C]。</p></li><li>算术表达式值的检索</li><li>LIKE、NOT LIKE</li><li>基于派生表的查询</li></ul><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="定义基本表"><a href="#定义基本表" class="headerlink" title="定义基本表"></a>定义基本表</h4><p><code>CREATE TABLE table_name (S# char(5) not null unique, SN char(20) not null, SA int, primary key(S#), check(SA &gt;= 18))</code></p><h4 id="修改基本表"><a href="#修改基本表" class="headerlink" title="修改基本表"></a>修改基本表</h4><p><code>ALTER TABLE table_name [ADD &lt;新列名&gt;&lt;数据类型&gt;][DROP&lt;完整性约束名&gt;][MODIFY&lt;列名&gt;&lt;数据类型&gt;]</code></p><h4 id="删除基本表"><a href="#删除基本表" class="headerlink" title="删除基本表"></a>删除基本表</h4><p><code>DROP TABLE table_name</code></p><h4 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h4><p><code>CREATE VIEW view_name AS (SELECT ...)</code></p><ul><li>视图消解：将视图定义的子查询和用户查询结合，转换成对基本表的查询。</li><li>视图作用：<ul><li>检化用户操作</li><li>使用户能够以多种角度看待同一数据</li><li>提供一定程度的逻辑独立性</li><li>能够对数据提供安全保护</li></ul></li></ul><h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p><code>INSERT INTO table_name ([&lt;属性列&gt;{,&lt;属性列&gt;}]) VALUES(&lt;值&gt;{,&lt;值&gt;})</code></p><p><code>Insert Into &lt;表名&gt;[(&lt;属性列&gt;[{,&lt;属性列&gt;}])]&lt;子查询&gt;</code></p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p><code>UPDATE table_name SET &lt;列名&gt;=&lt;表达式&gt;</code></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><code>DELETE FROM table_name [WHERE &lt;条件&gt;]</code></p><h3 id="嵌入式SQL"><a href="#嵌入式SQL" class="headerlink" title="嵌入式SQL"></a>嵌入式SQL</h3><p>把SQL的最佳特性与程序设计语言的最佳特性结合，使SQL功能更强，灵活性更强。</p><p>==预编译法==：把嵌入在程序中的SQL语句翻译为高级语言源码，然后按主语言的通常方式进行编译、链接生成可执行代码。</p><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><p>允许程序运行过程中临时组装SQL语句，有语句可变、条件可变、数据库对象，查询条件均可变三种形式。</p><h3 id="ODBC-JDBC"><a href="#ODBC-JDBC" class="headerlink" title="ODBC/JDBC"></a>ODBC/JDBC</h3><p>四个组件：应用程序、驱动程序管理器、驱动程序和数据源。</p><h2 id="第四章-数据库保护"><a href="#第四章-数据库保护" class="headerlink" title="第四章 数据库保护"></a>第四章 数据库保护</h2><h3 id="安全性控制"><a href="#安全性控制" class="headerlink" title="安全性控制"></a>安全性控制</h3><ul><li>安全性：保护数据库以防止不合法的使用所造成的数据泄漏、更改和破坏。<ul><li>向授权用户提供可靠的信息服务。</li><li>拒绝对数据库的非授权存取访问请求，保证数据的可用性、完整性和一致性，进而保护数据库所有者和使用者的合法权益。</li></ul></li><li>安全性控制：包含数据库系统的计算机系统安全模型。<ul><li>用户标识与鉴别：用户标识和认证是系统提供的最外层安全保护措施。<ul><li>标识：系统采用一定的方式标识其用户或应用程序的名字或身份。</li><li>认证：系统在用户或应用程序登录时判断其是否为合法的授权用户。</li></ul></li></ul></li><li>存取控制：确保合法用户按照指定的权限使用DBMS和访问数据。<ul><li>用户权限定义</li><li>合法权限检查</li><li>上述两者一起组成了DBMS的安全子系统。</li></ul></li><li>存取控制方法分类<ul><li>==自主存取控制（DAC）==：用户对于不同数据对象有不同的存取权限，不同用户对同一对象也有不同的权限。<strong>用户还可以将其拥有的权限转授给其他用户</strong>。</li><li>==强制存取控制（MAC）==：对于任意一个对象，只有具有合法许可证的用户才可以存取。</li><li>对于用户存取权限的定义称为<strong>授权</strong>。在授权中应指明用户名、数据对象名、允许的操作对象类型。</li></ul></li><li>SQL可以授予用户的两类权限：<ul><li>用户级权限：DBA为每个用户授予特定权限，是对用户使用整个数据库权限的限定。</li><li>关系级权限：DBA和数据库对象的拥有者为用户授予的与关系或视图有关的权限，这种权限是对用户使用关系的视图权限的限定。</li><li>授权：GRANT option TO user，回收权限：REVOKE option ON user。</li></ul></li><li>角色与用户组<ul><li>角色是一组权限的集合。</li><li>用户组是一组具有相同特性用户的集合，可以在授权或收回权限时以用户组为单位进行。</li></ul></li><li>强制存取方法：MAC中全部实体被分为主体和客体。<ul><li>主体是系统中的活动实体，包括实际用户和代表用户的各进程。</li><li>客体是系统的被动实体，由主体操纵。</li><li>对于主客体，DBMS为每个实例指定一个<strong>敏感度标记（Label）</strong>。<strong>主体的敏感度标记称为许可证级别，客体的敏感度标记称为密级</strong>。</li><li>MAC机制通过对比主体的label和客体的label最终确定主体是否能够存取客体。</li><li>当某一主体以某一许可证级别注册入系统时，系统要求他对任何客体的存取必须遵循如下规则：<ul><li>只有当主体的许可证级别大于等于客体的密级时，主体才能读取相应客体。</li><li>仅当主体许可证级别等于客体的密级时，才可以写相应客体。</li></ul></li></ul></li><li>其他方法：<ul><li>视图机制</li><li>审计</li><li>数据加密</li></ul></li></ul><h3 id="完整性控制"><a href="#完整性控制" class="headerlink" title="完整性控制"></a>完整性控制</h3><ul><li>完整性：数据的正确性和相容性。<ul><li>正确性：数据应该具有合法类型，在有效取值范围内。</li><li>相容性：表示同一个事实的两个数据应该相同。</li><li>数据库是否保持完整性关系到数据库系统是否能真实反映现实世界。</li></ul></li><li>完整性约束条件：施加在数据库数据之上的语义约束条件称为数据库完整性约束条件。作用对象可以是<strong>列、元组和关系</strong>三种。</li><li>完整性约束条件分类：<ul><li><strong>静态约束</strong>：反应数据库状态合理性的约束。</li><li><strong>动态约束</strong>：反应数据库状态变迁的约束。</li></ul></li><li>完整性控制包括三个方面的功能：<ul><li>定义功能</li><li>检查功能</li><li>违约相应</li></ul></li><li>完整性检查时机：<ul><li>立即执行约束：在执行用户事务过程中，在一条语句执行完后立即进行完整性约束的检查。</li><li>延迟执行约束：整个用户事务执行完毕后，在进行完整性约束的检查。</li></ul></li><li>完整性规则表示：五元组<ul><li>D：数据对象。（工资）</li><li>O：触发完整性检查的数据库操作。（插入或修改）</li><li>A：数据库对象必须满足的断言或语义约束。（工资&gt;=500000000）</li><li>C：选择A作用的数据对象值的谓词。（职称=’老八’）</li><li>P：违反完整性规则时触发的过程。（拒绝执行该操作）</li></ul></li><li>SQL完整性：断言ASSERTION，触发器TRIGGER。</li></ul><h2 id="第五章-关系数据理论"><a href="#第五章-关系数据理论" class="headerlink" title="==第五章 关系数据理论=="></a>==第五章 关系数据理论==</h2><h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><ul><li>数据依赖：属性值之间相互依赖又相互制约的关系。最重要的有两种：函数依赖和多值依赖。</li></ul><h4 id="函数依赖的定义"><a href="#函数依赖的定义" class="headerlink" title="函数依赖的定义"></a>函数依赖的定义</h4><ul><li>定义：对于X的每个具体值，Y有唯一的值与之对应，则称X函数确定Y或Y函数依赖于X。（$X\rightarrow Y$）</li></ul><h4 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h4><ul><li>平凡函数依赖：$Y\sube X$。</li><li>非平凡函数依赖：不是平凡函数依赖。</li><li>决定因素：$X$是$X\rightarrow Y$的决定因素。</li><li>完全函数依赖：如果有$X\rightarrow Y$且对于任意$X$的真子集$X’$都有$X’\nrightarrow Y$，则是完全函数依赖。</li><li>部分函数依赖：不是完全函数依赖的函数依赖。</li><li>传递函数依赖：$X\rightarrow Y$且$Y\rightarrow Z$，并且$Y \nrightarrow X$，则称$Z$对$X$传递函数依赖。</li></ul><h5 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h5><p>函数依赖是语义范畴的概念，不随时间变化。</p><h4 id="与联系的关系"><a href="#与联系的关系" class="headerlink" title="与联系的关系"></a>与联系的关系</h4><ul><li>1对1：有$X\rightarrow Y$和$Y\rightarrow X$。</li><li>1对m：有$Y\rightarrow X$。</li><li>n对m：无函数依赖关系。</li></ul><h4 id="关系键的形式定义"><a href="#关系键的形式定义" class="headerlink" title="关系键的形式定义"></a>关系键的形式定义</h4><ul><li>候选码与主码：<ul><li>候选码：U完全函数依赖于K。</li><li>主码：如果多个候选码，就选一个作为主码。性质有唯一性和最小性。</li></ul></li><li>主属性与非主属性：<ul><li>主属性：包含在任何一个候选码中的属性。</li><li>非主属性：不是主属性。</li></ul></li><li>外部码：R中的属性或属性组X不是R的码但是是另一个关系模式的码，则X是R的外部码。</li></ul><h4 id="函数依赖的逻辑蕴涵"><a href="#函数依赖的逻辑蕴涵" class="headerlink" title="函数依赖的逻辑蕴涵"></a>函数依赖的逻辑蕴涵</h4><ul><li>从$R<U, F>$中可以推出$X \rightarrow Y$则称为$F$逻辑蕴涵$X \rightarrow Y$。</li><li>$F$的闭包：$F$所蕴涵的函数依赖的全体，记作$F^+$。</li></ul><h4 id="Armstrong公理系统"><a href="#Armstrong公理系统" class="headerlink" title="==Armstrong公理系统=="></a>==Armstrong公理系统==</h4><p>对于$R<U, F>$有如下规则：</p><ul><li>A1自反律：若$Y\sube X\sube U$则$X \rightarrow Y$为$F$所蕴涵。</li><li>A2增广律：若$X \rightarrow Y$为$F$所蕴涵，且$Z\sube U$则$XZ\rightarrow YZ$为$F$所蕴涵。</li><li>A3传递律：若$X \rightarrow Y$且$Y \rightarrow Z$为$F$所蕴涵，则$X \rightarrow Z$为$F$所蕴涵。</li></ul><h5 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h5><ul><li>合并规则：由$X \rightarrow Y$，$Y \rightarrow Z$，有$X \rightarrow YZ$。</li><li>伪传递规则：由$X \rightarrow Y$，$WY \rightarrow Z$，有$XW \rightarrow Z$。</li><li>分解规则：由$X \rightarrow Y$和$Z \sube Y$，有$X \rightarrow Z$。</li><li>定理1：$X \rightarrow A_1 A_2 A_3\dots A_k$成立等价于$X\rightarrow A_i$（i = 1, 2, 3…k）成立。</li></ul><h5 id="属性集闭包"><a href="#属性集闭包" class="headerlink" title="属性集闭包"></a>属性集闭包</h5><ul><li>定理：$X \rightarrow Y$可以由$F$根据公理系统导出 等价于 $Y \sube X_F^+$。</li></ul><h5 id="公理系统的有效性与完备性"><a href="#公理系统的有效性与完备性" class="headerlink" title="公理系统的有效性与完备性"></a>公理系统的有效性与完备性</h5><ul><li>有效性：由F除法根据Armstrong公里推导出来的每一个函数依赖一定在F所蕴涵的函数依赖的全体之中。</li><li>完备性：F所蕴涵的函数依赖的全体中的每一个函数依赖，必定可以由F根据Armstrong公理系统导出。</li></ul><h5 id="求属性闭包的算法"><a href="#求属性闭包的算法" class="headerlink" title="求属性闭包的算法"></a>求属性闭包的算法</h5><ul><li>初始，$X_F^+=X$，然后把$F$中所有$X_F$的子集能推出的属性都加进去，直到不变或者变为属性全集$U$。</li></ul><h5 id="函数依赖集等价"><a href="#函数依赖集等价" class="headerlink" title="函数依赖集等价"></a>函数依赖集等价</h5><ul><li>若函数依赖集$F^+=G^+$，则称F和G等价。</li><li>==最小函数依赖集==条件：<ul><li>$F$中任一函数依赖$X \rightarrow A$，$A$必须是单属性。</li><li>$F$中不存在$X \rightarrow A$使得$F$与$F-{X\rightarrow A}$等价，即不存在多余的依赖。</li><li>$F$中不存在$X \rightarrow A$，在$X$中有真子集$Z$，使得$F$与$F-{X \rightarrow A}∪{Z \rightarrow A}$等价，即左侧不能有多余的属性。</li></ul></li><li>==极小化的算法：==<ul><li>首先将所有$X\rightarrow Y$的$Y$展开。</li><li>逐个检查$F$中的函数依赖的左侧，如果左侧是多属性，且删去一个属性后依然可以推出右侧，则能够删掉。形式化为：对于$X \rightarrow A$，设$X=B_1\dots B_m$，如果$A∈(X-B_i)^+_F$，则以$(X-B_i)$取代$X$直到$F$不再改变。</li><li>逐个检查$F$中的每个函数依赖，如果删掉函数依赖后的$G=F-{X\rightarrow A}$，仍然可以有$A∈(X)_G^+$，就删除该函数依赖。</li></ul></li></ul><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><p>如果一个关系满足某个指定的约束集，则称它属于某种特定的范式（Normal Form）。</p><h4 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h4><p>当一个关系只包含原子值这一约束时，称为1NF。也就是表里每个格只有一个值。满足原子值这一约束条件的关系称为规范化关系简称范式。</p><p>一个低一级范式的关系模式，可以通过<strong>模式分解</strong>转换为若干高级范式的关系模式的集合，这个过程称为<strong>规范化</strong>。</p><h4 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h4><ul><li>定义：1NF的关系的每个非主属性完全依赖于码，就是2NF。</li><li>弊病：<ul><li>插入异常有所改善但是仍然存在。</li><li>删除异常。</li><li>数据冗余。</li></ul></li></ul><h4 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h4><p>定义：如果不存在码$X$，属性组$Y$和非主属性$Z(Z不是Y的子集)$，使得下式成立，$X\rightarrow Y$，$Y\rightarrow Z$，$Y \nrightarrow X$，则$R∈3NF$。（2NF的关系模式，每个非主属性都不传递依赖于任何码）</p><h4 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a>BCNF</h4><ul><li>所有非主属性都完全函数依赖于每个候选码。</li><li>所有主属性都完全函数依赖于每个不包含它的候选码。</li><li>没任何属性完全函数依赖于非码的任意一组属性。</li></ul><h4 id="多值依赖与4NF"><a href="#多值依赖与4NF" class="headerlink" title="多值依赖与4NF"></a>多值依赖与4NF</h4><ul><li>多值依赖定义：$Z = U - X - Y$，关系模式$R(U)$中多值依赖$X\rightarrow \rightarrow Y$成立，当且仅当对$R(U)$的任一关系r，给定的一对$(x,z)$值有一组$Y$的值，这组值仅仅取决于x值而与z值无关。</li><li>多值依赖有对称性，若$X\rightarrow \rightarrow Y$则$X\rightarrow \rightarrow (U-X-Y)$。</li><li>$X\rightarrow Y$可以推出$X\rightarrow \rightarrow Y$。</li><li>4NF：对于每个非平凡的多值依赖$X\rightarrow \rightarrow Y$且必须是函数依赖，$X$都含有码。</li></ul><h3 id="规范化目的与基本思想"><a href="#规范化目的与基本思想" class="headerlink" title="规范化目的与基本思想"></a>规范化目的与基本思想</h3><p>在关系数据库中，对关系的最基本要求是满足1NF。</p><p>规范化要逐步消除数据依赖中不合适的部分，使数据库模式中各关系模式达到某种程度的“分离”，使一个关系只描述一个实体或者实体间的一种联系，即<strong>“一事一地”</strong>的设计原则。规范化的实质是<strong>概念的单一化</strong>。</p><h3 id="模式分解理论"><a href="#模式分解理论" class="headerlink" title="模式分解理论"></a>模式分解理论</h3><h4 id="无损连接性分解判定算法"><a href="#无损连接性分解判定算法" class="headerlink" title="无损连接性分解判定算法"></a>无损连接性分解判定算法</h4><p>$F={FD_1,\dots, FD_p}$</p><ul><li>如果将n个属性的关系模式分解为k个，先建立n列k行的表TB：<ul><li>每一列对应一个属性$A_i$。</li><li>每一行对应分解中的一个关系模式$R_i$。</li><li>分量的取值：$C<em>{ij}=A_j∈U_i?a_j:b</em>{ij}$。</li></ul></li><li>对$FD_i$中每一个函数依赖$X\rightarrow Y$，若TB中存在元素t1和t2使，t1[X]=t2[X]，则对每一个$A_i∈Y$：<ul><li>若$t1[A_i], t2[A_i]$有一个等于ai，则另一个也改为ai。</li><li>若上面不成立，就取$t1[A_i]=t2[A_i]$。（t1行号小于t2）</li></ul></li><li>反复执行上一步直到：<ul><li>TB出现一行为全a，即为无损分解。</li><li>TB不变且没有一行为全a，为有损分解。</li></ul></li></ul><h4 id="无损分解判定准则"><a href="#无损分解判定准则" class="headerlink" title="无损分解判定准则"></a>无损分解判定准则</h4><p>定理：分解$ρ={R_1<U_1,F_1>,R_2<U_2,F_2>}$具有无损连接性的充分必要条件是，$U_1∩U_2\rightarrow U_1-U_2∈F^+$或$U_1∩U_2\rightarrow U_2-U_1∈F^+$。即$R_1, R_2$的共同属性至少构成$R_1,R_2$两者之一的候选码。</p><h4 id="保持函数依赖判定准则"><a href="#保持函数依赖判定准则" class="headerlink" title="保持函数依赖判定准则"></a>保持函数依赖判定准则</h4><p>$R$中的每个函数依赖都能够从$R_1,\dots,R_n$函数依赖的并集中逻辑导出。</p><h4 id="模式分解原则"><a href="#模式分解原则" class="headerlink" title="模式分解原则"></a>模式分解原则</h4><ul><li>投影分解应遵循的原则：<ul><li>具有无损连接性</li><li>保持函数依赖</li></ul></li><li>模式分解能够达到的最高范式等级：<ul><li>要求保持函数依赖，总可以达到3NF，不一定到BCNF。</li><li>要求无损连接，一定可以达到4NF或更高。</li><li>要求两者都保持，可以达到3NF，但不一定到BCNF。</li></ul></li></ul><h4 id="达到3NF的等价模式分解"><a href="#达到3NF的等价模式分解" class="headerlink" title="达到3NF的等价模式分解"></a>达到3NF的等价模式分解</h4><h5 id="保持函数依赖的分解算法"><a href="#保持函数依赖的分解算法" class="headerlink" title="保持函数依赖的分解算法"></a>保持函数依赖的分解算法</h5><ul><li>对F进行极小化。</li><li>找出不在F的属性，将它们构成一个关系模式，并且从U中去掉。</li><li>若有$X\rightarrow A∈F$，且$XA=U$，则$ρ={R}$，算法终止。</li><li>对F按具有相同左部的原则分成k组，每一组函数以阿里所涉及的属性全体记为$U_i$，若有$U_i\sube U_j$则去掉$U_i$。令$F_i$为$F$在$U_i$上的投影，则可以获得一个保持函数依赖的分解$ρ={R_1<U_1,F_1>,\dots,R_k<U_k,F_k>}$。</li></ul><h5 id="同时保持函数依赖和无损连接的分解算法"><a href="#同时保持函数依赖和无损连接的分解算法" class="headerlink" title="同时保持函数依赖和无损连接的分解算法"></a>同时保持函数依赖和无损连接的分解算法</h5><p>设$ρ$是一个保持函数依赖的分解，$X$为$R<U,F>$的码。</p><ul><li>如果有某个$U_i$满足$X\sube U_i$，则ρ即为所求。</li><li>否则令$τ=ρ∪{R*<X,F_X>}$，τ即为所求。</li></ul><h4 id="达到BCNF的无损连接分解算法"><a href="#达到BCNF的无损连接分解算法" class="headerlink" title="达到BCNF的无损连接分解算法"></a>达到BCNF的无损连接分解算法</h4><ul><li>令$ρ=R<U,F>$。</li><li>检查$ρ$中各关系模式是否属于BCNF，若是，则算法终止。</li><li>设ρ中的$R<em>i<U_i,F_i>$不属于BCNF，则存在函数依赖$X\rightarrow A∈F_i^+$，且$X$不是$R_i$的码，则$XA$是$U_i$的真子集，将$R_i$分解为$\sigma={S_1,S_2}$，其中$U</em>{S<em>1}=XA,U</em>{S_2}=U_i-{A}$，以$\sigma$代替$R_i$返回上一步。</li></ul><h3 id="候选码的求解"><a href="#候选码的求解" class="headerlink" title="候选码的求解"></a>候选码的求解</h3><h4 id="属性分类"><a href="#属性分类" class="headerlink" title="属性分类"></a>属性分类</h4><ul><li>L类：只出现在F函数依赖左侧的属性。</li><li>R类：只出现在F函数依赖右侧的属性。</li><li>N类：没有出现在函数依赖中的属性。</li><li>LR类：在左右均出现的属性。</li></ul><h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><ul><li>如果X是L类属性，则必是任一候选码的成员。</li><li>如果X是R类属性，则X不在R的任何一个候选码中。</li><li>如果X是N类属性，则X必包含在任一候选码中。</li></ul><h4 id="图论判定法"><a href="#图论判定法" class="headerlink" title="图论判定法"></a>图论判定法</h4><p>将函数依赖关系绘制成有向图。</p><ul><li>入度为0的为原始点，L类。</li><li>出度为0的为终结点，R类。</li><li>入度出度均不为0的为途中点，LR类。</li><li>入度出度均为0的为孤立点，N类。</li><li>关键点：原始点和孤立点。</li><li>独立回路：不能由其他点到达的回路。</li></ul><h4 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a>定理</h4><ul><li>关键点必在R的任何候选码中。</li><li>终结点必不在R的任何候选码中。</li><li>R具有唯一候选码的充要条件是G中不存在独立回路。</li><li>若Y是途中点且Y在独立回路，则Y必在某候选码中。</li></ul><h4 id="多属性依赖集候选码求解"><a href="#多属性依赖集候选码求解" class="headerlink" title="多属性依赖集候选码求解"></a>多属性依赖集候选码求解</h4><ul><li>将所有属性分成L、R、LR和N四类，并令X代表L和N类，Y代表LR类。</li><li>求出$X_F^+$，如果是U，则X为唯一候选码，否则继续下一步。</li><li>对于Y中任一一个属性A，求$(XA)_F^+$，若为U，则XA为一个候选码，否则在Y中依次取2个、3个，求属性闭包，直到闭包包含R的全部属性。</li></ul><h3 id="与数据库设计的联系"><a href="#与数据库设计的联系" class="headerlink" title="与数据库设计的联系"></a>与数据库设计的联系</h3><ul><li>求最小依赖集消除冗余联系。</li><li>一般情况下3NF足以满足要求。</li></ul><h2 id="第六章-数据库设计"><a href="#第六章-数据库设计" class="headerlink" title="第六章 数据库设计"></a>第六章 数据库设计</h2><h3 id="数据库设计概述"><a href="#数据库设计概述" class="headerlink" title="数据库设计概述"></a>数据库设计概述</h3><ul><li>数据库设计：对于一个给定的应用环境，<strong>设计优化的数据库逻辑和物理结构，建立数据库</strong>，使之能够有效地存储数据，为开发满足用户需求的应用系统奠定基础。</li><li>数据库设计的特点：要把<strong>数据设计</strong>和<strong>处理设计</strong>密切结合。</li><li>设计方法：<ul><li>手工试凑法：根据应用的数据要求与处理要求直接设计数据库的结构。</li><li>规范设计法：运用软工思想，<strong>整个设计过程划分为若干阶段，每个阶段只解决整个设计中的部分问题，是迭代和逐步求精的过程</strong>。</li></ul></li></ul><h3 id="数据库设计的基本步骤"><a href="#数据库设计的基本步骤" class="headerlink" title="数据库设计的基本步骤"></a>数据库设计的基本步骤</h3><ul><li>==需求分析==：现实世界</li><li>==概念结构设计==：概念模式，生成概念模型，ER图</li><li>==逻辑结构设计==：逻辑模式，生成DBMS支持的数据模型</li><li>物理结构设计：内模式，设计存储结构和存取方法</li><li>数据库实施</li><li>数据库运行维护</li></ul><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><ul><li>目标：收集支持系统应用目标的基础数据及其处理。重点是“数据”和“处理”，包括<strong>处理要求，信息要求，安全性与完整性要求</strong>。</li><li>两个阶段：调查用户实际要求；分析表达需求，用数据流图和数据字典。</li><li>数据流图<ul><li>自顶向下逐步分解处理功能以及他们所用的数据。</li></ul></li><li>数据字典：需求分析阶段，可以看成<strong>数据元素表</strong>。<ul><li>包含每一个数据元素的名字、含义等各方面的描述。</li><li>从数据流图提取出所有原子数据项。</li><li>把有联系的数据项组合起来形成数据组。</li><li>以数据组为单位写出语义定义、类型定义、完整性约束定义等。</li></ul></li></ul><h4 id="概念结构设计"><a href="#概念结构设计" class="headerlink" title="==概念结构设计=="></a>==概念结构设计==</h4><p>ER图：参考上面第一章内容。</p><h5 id="设计概念结构四类方法"><a href="#设计概念结构四类方法" class="headerlink" title="设计概念结构四类方法"></a>设计概念结构四类方法</h5><ul><li>自顶向下</li><li><strong>自底向上：最常用</strong></li><li>逐步扩张</li><li>混合策略</li></ul><h5 id="数据抽象"><a href="#数据抽象" class="headerlink" title="数据抽象"></a>数据抽象</h5><ul><li>分类：定义某一概念作为现实世界中一组对象的类型。</li><li>聚集：定义某一类型的组成成分。</li><li>概括：定义类型之间的一种子集联系。</li></ul><h5 id="实体模型的调整原则"><a href="#实体模型的调整原则" class="headerlink" title="实体模型的调整原则"></a>实体模型的调整原则</h5><ul><li>属性不能再分，必须是<strong>不可分的数据项</strong>。</li><li>属性不能与其他实体有联系。</li><li>实体与属性之间保持1:1或n:1联系，不满足的情况可以将属性上升为实体。</li></ul><h5 id="集成局部ER图"><a href="#集成局部ER图" class="headerlink" title="集成局部ER图"></a>集成局部ER图</h5><ul><li>合并：解决各分ER图之间的冲突，将各分ER图合并成初步ER图。冲突主要包括属性冲突、命名冲突和结构冲突。</li><li>修改和重构：消除冗余生成基本ER图。</li></ul><h5 id="设计基本ER图"><a href="#设计基本ER图" class="headerlink" title="设计基本ER图"></a>设计基本ER图</h5><ul><li>消除冗余，可能存在冗余数据或冗余联系。</li></ul><h4 id="逻辑结构设计"><a href="#逻辑结构设计" class="headerlink" title="逻辑结构设计"></a>逻辑结构设计</h4><p>把概念结构转换为选用的DBMS所支持的数据模型。</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul><li>概念结构根据转换规则生成一般数据模型。</li><li>根据关系数据理论，进行规范化。</li><li>生成特定DBMS支持下的数据模型。</li><li>优化数据模型。</li></ul><h4 id="物理结构设计"><a href="#物理结构设计" class="headerlink" title="物理结构设计"></a>物理结构设计</h4><ul><li>确定存储结构：索引、聚集、hash。</li><li>选择关系的存取方法</li></ul><h2 id="第七章-存储管理与索引"><a href="#第七章-存储管理与索引" class="headerlink" title="第七章 存储管理与索引"></a>第七章 存储管理与索引</h2><h3 id="DBMS存储管理的目标"><a href="#DBMS存储管理的目标" class="headerlink" title="DBMS存储管理的目标"></a>DBMS存储管理的目标</h3><p>最小化磁盘和主存间传输存储块的数量，最小化磁盘存取次数。在主存中保持尽量多的块。</p><h3 id="物理存储系统"><a href="#物理存储系统" class="headerlink" title="物理存储系统"></a>物理存储系统</h3><p>物理存储管理器（磁盘管理器）</p><ul><li>DBMS的最底层，负责数据在磁盘和主存间移动</li></ul><h3 id="数据库存储结构"><a href="#数据库存储结构" class="headerlink" title="数据库存储结构"></a>数据库存储结构</h3><p>数据库的存储结构主要是文件的组织结构。数据库由若干文件组成，文件由若干页组成。逻辑上，数据库被映射为底层存储中的文件，文件被组织为记录的序列，记录被映射到块上。每条记录被完全包含在单个块中。</p><h3 id="文件中记录的组织方式"><a href="#文件中记录的组织方式" class="headerlink" title="文件中记录的组织方式"></a>文件中记录的组织方式</h3><ul><li>堆：记录可以存放在文件空间中的任何位置</li><li>顺序：记录按搜索码顺序排列</li><li>索引：记录的关键字与相应记录的存储地址的对照表。索引表必须有序，主文件无所谓</li><li>散列：将记录散列到存储块中</li><li>聚集：具有相同或相似属性值的记录存储于连续的磁盘块中</li></ul><h3 id="缓冲区管理"><a href="#缓冲区管理" class="headerlink" title="缓冲区管理"></a>缓冲区管理</h3><p>负责缓存空间分配，内外存交换</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引文件由索引记录(索引项)构成，每条记录由索引域(搜索码)和指针构成</p><p>分类：==排序索引==和==哈希索引==</p><h4 id="排序索引"><a href="#排序索引" class="headerlink" title="排序索引"></a>排序索引</h4><p>聚集索引(主索引)：索引域/搜索码值的排列顺序与记录在文件中的排列顺序一致</p><p>非聚集索引(辅助索引)：索引项排列的次序与文件中记录的排列顺序不同</p><p>稠密索引：文件中的每个搜索码值都有一个索引项与其相对</p><p>稀疏索引：只有部分索引域/搜索码值有索引记录。当文件记录以索引域排序时，可以采用。==非聚集索引都是稠密索引==</p><p><strong>多级索引</strong>：</p><ul><li>B树索引：==关键字是散布在各层上==。从树根到叶节点每条路径的长度都相同，因此所有的叶节点都在同一层上；根节点有[2,n]个子节点，即指针个数</li><li>B+树索引：==把树中所有关键字都按递增次序从左到右安排在叶节点上==，并且链接起来；每个节点最多包含n-1个搜索码以及n个指针；B+树文件组织中叶节点存储的是记录而不是记录的指针</li></ul><h4 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h4><ul><li>周期性重组的开销大</li><li>适用于检索哈希码等于特定值的记录检索。==不适用于区间值的检索，以及部分匹配检索==</li><li>有很多重复值的列，不适于做key</li></ul><h2 id="第八章-关系查询处理与查询优化"><a href="#第八章-关系查询处理与查询优化" class="headerlink" title="第八章 关系查询处理与查询优化"></a>第八章 关系查询处理与查询优化</h2><h3 id="关系查询处理步骤——四个阶段"><a href="#关系查询处理步骤——四个阶段" class="headerlink" title="关系查询处理步骤——四个阶段"></a>关系查询处理步骤——四个阶段</h3><ul><li>查询分析：词法分析，语法检查和语法分析。</li><li>查询检查：语义检查，存取权限检查，SQL语句转换为关系代数表达式。</li><li>查询优化：选择一个高效的查询处理策略，按照优化的层次分为代数优化和物理优化。</li><li>查询执行：生成查询计划，生成执行查询计划的代码。</li></ul><h3 id="查询操作的实现方法"><a href="#查询操作的实现方法" class="headerlink" title="查询操作的实现方法"></a>查询操作的实现方法</h3><p>选择：全表扫描法，索引扫描法</p><p>连接：嵌套循环法(选择较小表作为外表)，索引连接法，排序合并法(只能用于等值连接或自然连接)，Hashjoin法(适用于等值连接或自然连接)</p><h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><ul><li>目标：选择一个高效的执行查询处理策略，使得查询代价最小，访问磁盘块数最少。</li><li>执行开销：总代价=IO代价+CPU代价+内存代价</li><li>按照优化层次分为代数优化和物理优化：<ul><li>代数优化：改变代数表达式的操作次序和组合。</li><li>物理优化：存取路径和底层操作算法选择。</li></ul></li><li>一般步骤：<ul><li>把查询转换成语法树，如关系代数语法树。</li><li>代数优化语法树。</li><li>物理优化，选择操作算法与存取路径。</li><li>生成查询计划。</li></ul></li></ul><h3 id="代数优化"><a href="#代数优化" class="headerlink" title="代数优化"></a>代数优化</h3><p><strong>通过对关系代数表达式的等价变换来提高查询效率，即改变代数表达式中操作的次序和组合</strong></p><p>等价：用相同的关系代替两个表达式中相应的关系所得到的结果是相同的。</p><ul><li>连接和笛卡尔积交换律。</li><li>连接和笛卡尔积结合律。</li><li>投影串接定律。</li><li>选择串接定律。</li><li>选择与投影的交换律。</li><li>选择与笛卡尔积的交换律。</li><li>选择与并的分配律。</li><li>选择与差的分配律。</li><li>选择对自然连接的分配律。</li><li>投影与笛卡尔积的分配律。</li><li>投影与并的分配律。</li></ul><p>查询树的启发式优化(优化的一般准则)：</p><ul><li>选择运算尽早做</li><li>投影运算尽早做</li><li>把笛卡尔积与选择转换为连接</li><li>中间结果复用</li><li>对叶节点进行必要投影操作以去掉无用属性</li></ul><h3 id="物理优化"><a href="#物理优化" class="headerlink" title="物理优化"></a>物理优化</h3><p><strong>选择高效合理的操作算法或存取路径，得到优化的查询计划</strong></p><p>常用方法：</p><ul><li>基于规则的启发式优化方法</li><li>基于代价估算的优化方法</li><li>两者结合的优化方法</li></ul><p>基于启发式规则的操作算法选择：</p><ul><li>选择操作的启发式规则：<ul><li>小关系使用全表顺序扫描。</li><li>大关系可以使用索引扫描。</li></ul></li><li>连接操作的启发式规则：<ul><li>排序合并</li><li>索引连接</li><li>Hash join</li><li>嵌套循环</li></ul></li></ul><h2 id="第九章-事务处理技术"><a href="#第九章-事务处理技术" class="headerlink" title="第九章 事务处理技术"></a>第九章 事务处理技术</h2><h3 id="事务的概念"><a href="#事务的概念" class="headerlink" title="事务的概念"></a>事务的概念</h3><h4 id="事务的定义"><a href="#事务的定义" class="headerlink" title="==事务的定义=="></a>==事务的定义==</h4><p>事务是用户定义的数据库操作序列，这些操作要么都做，要么都不做，是一个不可分割的工作单位。</p><ul><li>事务与应用程序是两个概念。</li><li>事务的开始与结束可以由用户显式控制。</li></ul><h4 id="事务的特性"><a href="#事务的特性" class="headerlink" title="==事务的特性=="></a>==事务的特性==</h4><ul><li>原子性：事务中包括的所有操作要么都做，要么都不做。</li><li>一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。</li><li>隔离性：一个事务的执行不能被其他事务干扰，一个事务内部的操作及使用的数据对其他并发事务是隔离的，并发执行的事务之间不能互相干扰。</li><li>持久性：一个事务一旦提交，它对数据库的影响必须是永久的，其他操作或故障不应该对其执行的结果有任何影响。</li></ul><p>ACID特性对于数据库数据的正确有效有重要意义。</p><ul><li>利用数据库并发控制机制以及数据库恢复机制保证事务的特性不被破坏。从而保证数据库数据的正确有效。</li><li><strong>事务是数据库恢复和并发控制的基本单位。</strong></li></ul><h4 id="SQL事务的定义"><a href="#SQL事务的定义" class="headerlink" title="SQL事务的定义"></a>SQL事务的定义</h4><ul><li>开始：<code>BEGIN TRANSACTION</code>。</li><li>结束：<code>COMMIT</code>或<code>ROLLBACK</code>。</li></ul><h3 id="数据库恢复技术"><a href="#数据库恢复技术" class="headerlink" title="数据库恢复技术"></a>数据库恢复技术</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>把数据库从某一错误状态恢复到某一已知的正确状态。</p><p>通过<strong>数据库管理系统的恢复子系统</strong>完成。</p><h5 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h5><ul><li>保证事务原子性。</li><li>当系统故障后，使数据库恢复正常状态。</li></ul><h4 id="故障种类"><a href="#故障种类" class="headerlink" title="故障种类"></a>故障种类</h4><ul><li>事务内部故障：<ul><li>可预期的：事务根据内部条件来回滚。</li><li>不可预期的：不能由应用程序处理，比如死锁、运算溢出、违反完整性规则等。</li></ul></li><li>系统故障：<ul><li>造成系统停止运行的任何事情。</li><li>使事务都异常终止但不会破坏数据库。</li></ul></li><li>介质故障：<ul><li>外存故障。</li><li>破坏全部或部分数据库，并影响正在存取这部分数据的所有事务。</li></ul></li><li>计算机病毒：<ul><li>数据库主要威胁，人为破坏或故障。</li><li>对数据进行非法修改。</li></ul></li></ul><p>两种影响：</p><ul><li>数据库本身被破坏。</li><li>数据库没有被破坏但数据可能不正确。</li></ul><h4 id="恢复的实现技术"><a href="#恢复的实现技术" class="headerlink" title="==恢复的实现技术=="></a>==恢复的实现技术==</h4><p>基本原理：<strong>冗余</strong>。</p><h5 id="数据转储"><a href="#数据转储" class="headerlink" title="数据转储"></a>数据转储</h5><ul><li>概念：DBA定期将整个数据库复制到磁带或另一个磁盘上保存起来的过程，备用数据称为<strong>后备副本或后援副本</strong>。</li><li>两种转储状态：<ul><li>静态转储：无事务运行时的转储并且转储过程中不允许对数据库存取修改</li><li>动态转储：转储期间允许对数据库进行存取或修改。需要用==后援副本加上日志文件==恢复。</li></ul></li><li>两种转储方式：<ul><li>海量转储：每次转储全部数据库。</li><li>增量转储：每次只转储上一次转储后更新过的数据。</li></ul></li><li>日志：记录事务对数据库更新操作的文件，分为以<strong>记录</strong>为单位和以数据块为单位的两种格式。<ul><li>作用：<strong>事务故障</strong>和系统故障恢复必须使用日志文件。</li><li>写入规则：先写入<strong>日志文件</strong>，后写数据库。</li></ul></li></ul><h5 id="故障的恢复策略"><a href="#故障的恢复策略" class="headerlink" title="故障的恢复策略"></a>故障的恢复策略</h5><ul><li>==事务故障==：<strong>UNDO，撤销事务，在不影响其他事务的情况下强行回滚。具体步骤为：反向扫描日志，对所有更新操作执行逆操作，直到读到该事务的开始标志</strong></li><li>==系统故障==：<strong>UNDO+REDO，撤销故障发生时未完成的事务，重做已完成但没有写入数据库的事务。具体步骤：正向扫描日志文件，找出故障发生前已经提交的事务，将其事务标识记入重做（REDO）队列。同时找出故障发生时尚未完成的事务，将其事务标识记入撤销（UNDO）队列；对撤销队列中的各个事务进行UNDO处理；对重做队列中的各个事务进行REDO处理。</strong></li><li>==介质故障==：<strong>装入最新数据库后备副本，使数据库恢复到最近一次转储时的一致状态。装入转储以后的日志文件副本，重做已经完成的事务。</strong></li></ul><h5 id="检查点技术"><a href="#检查点技术" class="headerlink" title="检查点技术"></a>检查点技术</h5><p>在日志文件中增加检查点记录，要记下所有正在执行的事务清单和这些事务最近一个日志记录的地址。</p><p>增加一个<strong>重新开始文件</strong>，用来记录各个检查点记录在日志文件中的地址。</p><p><strong>==恢复步骤：==</strong></p><ul><li>在重新开始文件中找到最后一个检查点记录在日志文件中的地址。</li><li>找到检查点时刻运行事务清单，把所有正在运行的事务的清单ACTIVE-LIST暂时放入UNDO-LIST</li><li>确定需要撤消和重做的事务，从检查点开始正向扫描日志文件，如果有新开始的事务Ti，把Ti暂时放入UNDO-LIST；如果有提交的事务Tj ，把Tj从UNDO-LIST队列移入到REDO-LIST队列</li><li>对UNDO-LIST中的每一个事务执行UNDO操作，对REDO-LIST中的每个事务执行REDO操作。</li></ul><h3 id="并发控制技术"><a href="#并发控制技术" class="headerlink" title="并发控制技术"></a>并发控制技术</h3><h4 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h4><h5 id="事务并发的优点"><a href="#事务并发的优点" class="headerlink" title="事务并发的优点"></a>事务并发的优点</h5><ul><li>一个事务多个步骤并发执行，<strong>提高系统吞吐量</strong>。</li><li>如果各个事务涉及的是数据库的不同部分，采用并发会<strong>减少平均响应时间</strong>。</li></ul><h5 id="带来的问题"><a href="#带来的问题" class="headerlink" title="==带来的问题=="></a>==带来的问题==</h5><ul><li>多个事务同时存取同一数据时，不加以控制会读取或存取不正确的数据，破坏一致性。</li><li><strong>丢失更新</strong>：两个事务同时读入数据并修改，后面的事务会破坏前面事务的结果，导致前面事务的结果丢失。</li><li><strong>脏数据的读出</strong>：先前事务的结果被撤销，后面事务已经读出了错误的数据。</li><li><strong>不能重复读</strong>：一个事务读取后，另一个事务更新了数据，导致第一个事务不能再现结果。</li></ul><h5 id="并发控制的基本思想和手段"><a href="#并发控制的基本思想和手段" class="headerlink" title="并发控制的基本思想和手段"></a>并发控制的基本思想和手段</h5><p>==合理调度并发事务，避免并发事务之间的互相干扰造成数据的不一致性。==</p><p>==主要方法是<strong>封锁机制</strong>==。</p><h4 id="封锁"><a href="#封锁" class="headerlink" title="封锁"></a>封锁</h4><p>事务T在对某个数据如表、记录等操作之前，先向系统发出请求，对其加锁，从而对该数据对象有了一定的控制权。</p><h5 id="封锁的类型"><a href="#封锁的类型" class="headerlink" title="封锁的类型"></a>封锁的类型</h5><ul><li>排它锁（X锁）：上锁后，则只允许当前事务对数据对象进行读取和修改，直到释放锁。</li><li>共享锁（S锁）：上锁后可以读取但不能修改数据对象，其他事务只能加S锁，也不能加X锁，直到释放S锁。</li></ul><h5 id="封锁协议"><a href="#封锁协议" class="headerlink" title="封锁协议"></a>封锁协议</h5><p>运用两种基本封锁可以建立不同的约定，形成不同级别的封锁协议。</p><ul><li>一级封锁协议：防止丢失修改。在修改数据R之前加X锁，结束才可以释放。</li><li>二级封锁协议：防止读脏数据。一级封锁协议加上在读取R之前必须加S锁，读完释放S锁。</li><li>三级封锁协议：保证数据可以重复读。一级封锁协议加上读取R前必须加S锁，直到事务结束才可以释放。</li></ul><h5 id="封锁粒度"><a href="#封锁粒度" class="headerlink" title="封锁粒度"></a>封锁粒度</h5><p>封锁对象的大小称为封锁的粒度。粒度大，则并发度低，封锁机构简单，开销小。粒度小，则并发度高，封锁机构复杂，开销高。</p><p><strong>多粒度封锁</strong>：在一个系统中同时支持多种封锁粒度，选择封锁粒度时应同时考虑封锁开销和并发度两个因素。</p><p><strong>多粒度封锁协议</strong>：允许多粒度树中每个结点被独立加锁，对一个结点加锁意味着所有后裔结点也被加以同样类型的锁。</p><p><strong>多粒度封锁问题：</strong>是否与该数据对象上的显式封锁冲突；是否与该数据对象上的隐式封锁冲突；是否与该数据对象下级的显式封锁冲突</p><p>==<strong>意向锁</strong>==：<strong>含义是该结点的下层结点正在被加锁，对任意结点加锁时，必须先对上级结点加意向锁。好处是，对象加锁时，不需要再检查下级结点的封锁。</strong></p><h5 id="三种常用意向锁"><a href="#三种常用意向锁" class="headerlink" title="三种常用意向锁"></a>三种常用意向锁</h5><ul><li>意向共享锁（IS锁）：如果要对一个对象加IS锁，表示他的后裔结点拟加S锁。</li><li>意向排它锁（IX锁）：如果要对一个数据对象加IX锁，表示他的后裔结点拟加X锁。</li><li>意向共享排它锁（SIX锁）：如果要对一个数据对象加SIX锁，表示对它加S锁，再加IX锁。</li></ul><h5 id="活锁与死锁"><a href="#活锁与死锁" class="headerlink" title="==活锁与死锁=="></a>==活锁与死锁==</h5><ul><li>活锁：一个事务一直占用锁，后面可能一直等待，采用先来先服务法。</li><li>死锁：预防死锁，死锁检测与解除。</li><li>预防死锁：<ul><li>一次封锁法：要求每个事务必须一次将其所有要使用的数据全部加锁，否则就不能执行，降低了系统的并发度。</li><li>顺序封锁法：预先对数据对象规定一个封锁顺序，所有事务都按照这个顺序封锁，实现难度大。</li></ul></li><li>死锁检测：<ul><li>超时法：如果等待时间超过时限就认为发生死锁。</li><li>等待图法：图中有回路说明出现了死锁。</li></ul></li><li>死锁恢复：选择一个处理死锁代价最小的事务，将其撤销。</li></ul><h4 id="事务的调度"><a href="#事务的调度" class="headerlink" title="事务的调度"></a>事务的调度</h4><p>N个事务的一个调度S是N个事务所有操作的一个序列S，表示这些操作的执行顺序，并且这个序列满足，对每个事务T，如果操作i在事务T中先于操作k，则在S中i也先于操作k。</p><h4 id="并发调度正确性"><a href="#并发调度正确性" class="headerlink" title="并发调度正确性"></a>并发调度正确性</h4><ul><li>一个事务正常或者预想的结果是没有其他并行事务干扰时得到的结果，因此<strong>一组事务的串行调度策略一定是正确的调度策略</strong>。</li><li>各种结果都将保持数据库数据的一致性，所以都是正确的。</li></ul><h4 id="并发调度的可串行性"><a href="#并发调度的可串行性" class="headerlink" title="并发调度的可串行性"></a>并发调度的可串行性</h4><ul><li>可串行化：多个事务并发执行正确，当且仅当其结果与按某一次序串行执行它们时的结果相同，我们称这种调度策略为可串行化调度。</li><li>可串行性是并行事务正确性的准则，一个给定的并发调度，当且仅当它是可串行化的，才认为是正确调度。</li><li>一个调度Sc在保证冲突操作次序不变的情况下，可以通过交换两个事务不冲突操作的次序，得到另一个串行调度Sc’，则调度Sc为冲突可串行化调度。</li><li>==两段锁协议==可以保证并行事务的可串行性。<ul><li>内容：<ul><li>对任何数据进行读写操作之前，事务首先要获得对该数据的封锁</li><li>在释放一个封锁之后，事务不再获得任何其他封锁</li></ul></li><li>含义：事务分为两个阶段，第一个阶段获得封锁称为<strong>扩展阶段</strong>，第二阶段释放封锁，称为<strong>收缩阶段</strong>。</li><li>定理：若所有事务均遵从两段锁协议，则这些事务的所有并发调度都是可串行化的。</li><li>注意：遵守两段锁协议只是充分条件。遵守两段锁的事务仍然可能发生死锁。</li></ul></li></ul><h2 id="第十章-分布式数据库"><a href="#第十章-分布式数据库" class="headerlink" title="第十章 分布式数据库"></a>第十章 分布式数据库</h2><h3 id="分布式数据库系统"><a href="#分布式数据库系统" class="headerlink" title="分布式数据库系统"></a>分布式数据库系统</h3><ul><li>分布性：数据分布存储在网络的各个节点。</li><li>逻辑上的整体性：数据被一种机制联系在一起，构成一个有机整体。</li><li>分布式数据库定义：由一组分布在计算机网络的不同结点上的数据组成，每个结点具有独立处理的能力，可以执行局部应用，同时每个结点也可以通过网络通信支持全局应用。</li><li>场地自治性：每个场地有自己的数据库，一组终端（局部应用）。</li><li>自治场地之间的协作性：逻辑上如同一个集中式数据库，可以在任何场地执行全局应用。</li></ul><h3 id="分布式数据库系统的特点"><a href="#分布式数据库系统的特点" class="headerlink" title="分布式数据库系统的特点"></a>分布式数据库系统的特点</h3><ul><li>数据独立性：<ul><li>逻辑独立性</li><li>物理独立性</li><li>分布独立性：逻辑分片、数据物理位置的分布细节等与用户无关。</li></ul></li><li>集中与自治相结合的控制结构：<ul><li>数据共享分为局部共享和全局共享。</li><li>分布式数据库有自治功能，系统又设有集中控制结构。</li></ul></li><li>适当增加数据冗余：<ul><li>在不同结点存储同一个数据的多个副本。</li><li>提高系统可靠性、可用性。</li><li>提高系统性能。</li></ul></li><li>全局的一致性、可串行性和可恢复性</li></ul><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><ul><li>全局外模式</li><li>全局概念模式</li><li>分片模式：<ul><li>分片方式：水平分片、垂直分片、导出分片、混合分片。</li><li>满足完全性、不相交性和可重构性。</li></ul></li><li>分布模式<ul><li>分布透明性：分片透明性、位置透明性、局部数据模型透明性。</li></ul></li><li>局部概念模式</li><li>局部内模式</li></ul><h3 id="DDBMS"><a href="#DDBMS" class="headerlink" title="DDBMS"></a>DDBMS</h3><p>组成</p><ul><li>LDBMS：局部场地上的数据库管理系统。</li><li>GDBMS：全局DBMS。</li><li>GDD：全局数据字典。</li><li>CM：通信管理。</li></ul><h3 id="主要技术"><a href="#主要技术" class="headerlink" title="主要技术"></a>主要技术</h3><h4 id="查询类型"><a href="#查询类型" class="headerlink" title="查询类型"></a>查询类型</h4><ul><li>局部查询：单结点</li><li>远程查询：单结点</li><li>全局查询：多个结点</li></ul><h4 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h4><ul><li>查询分解</li><li>选择操作执行的次序</li><li>选择执行操作的方法</li><li>使用半连接缩减关系。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库考点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Snail</title>
      <link href="/2019/11/01/Hexo-Theme-Snail/"/>
      <url>/2019/11/01/Hexo-Theme-Snail/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Theme-Snail"><a href="#Hexo-Theme-Snail" class="headerlink" title="Hexo-Theme-Snail"></a>Hexo-Theme-Snail</h1><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">View Hexo-Theme-Snail Sources On Github &#10174; </a></p><p><a href="https://www.dusign.net" target="_blank" rel="noopener">View Live Super Snail Blog &#10174;</a></p><p><img src="snail.png" alt="hexo-theme-snail"></p><p>Hexo-theme-snail is a succinct hexo theme. It has two colors, light and star, that can be set according to your own preferences in the settings, and also has the functions of sharing and commenting. More features are under development.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>light color theme and star theme</li><li>diversified comment system</li><li>notice tips</li><li>share to other platforms (under development)</li><li>picture sharing (under development)</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="Setup-your-blog"><a href="#Setup-your-blog" class="headerlink" title="Setup your blog"></a>Setup your blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><h3 id="Installation-Theme"><a href="#Installation-Theme" class="headerlink" title="Installation Theme"></a>Installation Theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ rm -rf <span class="built_in">source</span></span><br><span class="line">$ rm _config.yml package.json README.md LICENSE</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/dusign/hexo-theme-snail.git</span><br><span class="line">$ mv ./hexo-theme-snail/snail ./themes</span><br><span class="line">$ mv ./hexo-theme-snail/* ./</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="Set-Theme"><a href="#Set-Theme" class="headerlink" title="Set Theme"></a>Set Theme</h3><p>Modify the value of <code>theme:</code> in <code>_config.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure></p><h3 id="Start-the-Server"><a href="#Start-the-Server" class="headerlink" title="Start the Server"></a>Start the Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>Replace the following information with your own.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">At</span> <span class="string">the</span> <span class="string">bottom</span> <span class="string">of</span> <span class="string">the</span> <span class="string">well,</span> <span class="string">it</span> <span class="string">is</span> <span class="string">destined</span> <span class="string">to</span> <span class="string">see</span> <span class="string">only</span> <span class="string">the</span> <span class="string">sky</span> <span class="string">at</span> <span class="string">the</span> <span class="string">wellhead.</span> </span><br><span class="line">          <span class="string">However,</span> <span class="string">the</span> <span class="string">starting</span> <span class="string">point</span> <span class="string">only</span> <span class="string">affects</span> <span class="string">the</span> <span class="string">process</span> <span class="string">of</span> <span class="string">reaching</span> <span class="string">your</span> <span class="string">peak</span> <span class="string">and</span> <span class="string">does</span> <span class="string">not</span> <span class="string">determine</span> <span class="string">the</span> <span class="string">height</span> <span class="string">you</span> <span class="string">reach.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Dusign</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure></p><h3 id="Site-Settings"><a href="#Site-Settings" class="headerlink" title="Site Settings"></a>Site Settings</h3><p>Put customized pictures in <code>img</code> directory.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line"><span class="attr">SEOTitle:</span> <span class="string">Hexo-theme-snail</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">hexo-theme-snail@mail.com</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"A hexo theme"</span></span><br><span class="line"><span class="attr">keyword:</span> <span class="string">"dusign, hexo-theme-snail"</span></span><br><span class="line"><span class="attr">header-img:</span> <span class="string">img/header_img/home-bg-1-dark.jpg</span></span><br><span class="line"><span class="attr">signature:</span> <span class="literal">true</span> <span class="comment">#show signature</span></span><br><span class="line"><span class="attr">signature-img:</span> <span class="string">img/signature/Just-do-it-white.png</span></span><br></pre></td></tr></table></figure></p><h3 id="SNS-Settings"><a href="#SNS-Settings" class="headerlink" title="SNS Settings"></a>SNS Settings</h3><p>If you don’t want to display it, you can delete it directly.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SNS settings</span></span><br><span class="line"><span class="attr">github_username:</span>    <span class="string">dusign</span></span><br><span class="line"><span class="attr">twitter_username:</span>   <span class="string">dusignr</span></span><br><span class="line"><span class="attr">facebook_username:</span>  <span class="string">Gang</span> <span class="string">Du</span></span><br><span class="line"><span class="attr">zhihu_username:</span> <span class="string">dusignr</span></span><br></pre></td></tr></table></figure></p><h3 id="Sidebar-Settings"><a href="#Sidebar-Settings" class="headerlink" title="Sidebar Settings"></a>Sidebar Settings</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span>                      <span class="comment"># whether or not using Sidebar.</span></span><br><span class="line"><span class="attr">sidebar-about-description:</span> <span class="string">"Welcome to visit, I'm Dusign!"</span></span><br><span class="line"><span class="attr">sidebar-avatar:</span> <span class="string">img/ironman-draw.png</span>      <span class="comment"># use absolute URL, seeing it's used in both `/` and `/about/`</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">featured-tags</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">short-about</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent-posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">friends-blog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">archive</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># widget behavior</span></span><br><span class="line"><span class="comment">## Archive</span></span><br><span class="line"><span class="attr">archive_type:</span> <span class="string">'monthly'</span></span><br><span class="line"><span class="attr">show_count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Featured Tags</span></span><br><span class="line"><span class="attr">featured-tags:</span> <span class="literal">true</span>                     <span class="comment"># whether or not using Feature-Tags</span></span><br><span class="line"><span class="attr">featured-condition-size:</span> <span class="number">1</span>              <span class="comment"># A tag will be featured if the size of it is more than this condition value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Friends</span></span><br><span class="line"><span class="attr">friends:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Blog"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://blog.csdn.net/d_Nail"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Web"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Github"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://github.com/dusign"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Other"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">github.repository.address</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">coding.repository.address</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>See httpymls://github.com/imsun/gitment for detailed configuration method.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line"><span class="comment">## This comment system is gitment</span></span><br><span class="line"><span class="comment">## gitment url: https://github.com/imsun/gitment</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">client_id:</span></span><br><span class="line">  <span class="attr">client_secret:</span></span><br></pre></td></tr></table></figure></p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tip</span></span><br><span class="line"><span class="attr">tip:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">欢迎访问</span> <span class="string">&lt;a</span> <span class="string">href="https://www.dusign.net"</span> <span class="string">target="dusign"&gt;dusign&lt;/a&gt;</span> <span class="string">的博客，博客系统一键分享的功能还在完善中，请大家耐心等待。</span></span><br><span class="line">          <span class="string">若有问题或者有好的建议欢迎留言，笔者看到之后会及时回复。</span></span><br><span class="line">          <span class="string">评论点赞需要github账号登录，如果没有账号的话请点击</span> </span><br><span class="line">          <span class="string">&lt;a</span> <span class="string">href="https://github.com"</span> <span class="string">target="view_window"</span> <span class="string">&gt;</span> <span class="string">github</span> <span class="string">&lt;/a&gt;</span> <span class="string">注册，</span> <span class="string">谢谢</span> <span class="string">!</span></span><br></pre></td></tr></table></figure><h3 id="Color-Sheme"><a href="#Color-Sheme" class="headerlink" title="Color Sheme"></a>Color Sheme</h3><p>Set the <code>enable</code> value of the desired color sheme to <code>true</code>. If the value of <code>bg_effects.star.enable</code> is <code>true</code>, please modify the value of <code>highlight_theme</code> in <code>./themes/snail/_config.yml</code> to <code>night</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Color Sheme</span></span><br><span class="line"><span class="comment">## If there is no effect after modification, please empty the cache and try again.</span></span><br><span class="line"><span class="comment">## ⚠️ The following special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br><span class="line"><span class="attr">bg_effects:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">color:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">pointColor:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">zIndex:</span> <span class="number">-9</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">  <span class="attr">mouse_click:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">'"🌱","just do it","🌾","🍀","don'</span><span class="string">'t give up","🍂","🌻","try it again","🍃","never say die","🌵","🌿","🌴"'</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">'"rgb(121,93,179)"</span></span><br><span class="line"><span class="string">          ,"rgb(76,180,231)"</span></span><br><span class="line"><span class="string">          ,"rgb(184,90,154)"</span></span><br><span class="line"><span class="string">          ,"rgb(157,211,250)"</span></span><br><span class="line"><span class="string">          ,"rgb(255,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(242,153,29)"</span></span><br><span class="line"><span class="string">          ,"rgb(23,204,16)"</span></span><br><span class="line"><span class="string">          ,"rgb(222,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(22,36,92)"</span></span><br><span class="line"><span class="string">          ,"rgb(127,24,116)"</span></span><br><span class="line"><span class="string">          ,"rgb(119,195,79)"</span></span><br><span class="line"><span class="string">          ,"rgb(4,77,34)"</span></span><br><span class="line"><span class="string">          ,"rgb(122,2,60)"'</span></span><br><span class="line">  <span class="attr">star:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a>Releases</h2><p>V1.0</p><ul><li>fix the bugs</li><li>add comment system</li><li>add notice tips</li><li>add star sheme</li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-theme-snail </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
